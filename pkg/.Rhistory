if(sum(breeding.size.litter>0)>0 || remove_overlay){
breeding.size = current.size - start.size
breeding.size.total = sum(breeding.size)
if(verbose && generation.cores==1 && !remove_overlay){
cat(paste0("Successfully generated ", breeding.size.total, " individuals from ", litter_counter-1, " litters.\n"))
}
if(verbose && generation.cores==1 && remove_overlay){
cat(paste0("Successfully generated ", breeding.size.total, " individuals.\n"))
}
for(sex in 1:2){
n_gen = length(population$breeding[[current.gen+1]][[4+sex]])
if( n_gen >= (current.size[sex])){
remove1 = current.size[sex]:n_gen
population$breeding[[current.gen+1]][[2 + sex]] =  population$breeding[[current.gen+1]][[2 + sex]][,-remove1,drop=FALSE]
population$breeding[[current.gen+1]][[4 + sex]] =  population$breeding[[current.gen+1]][[4 + sex]][-remove1]
population$breeding[[current.gen+1]][[6 + sex]] =  population$breeding[[current.gen+1]][[6 + sex]][,-remove1,drop=FALSE]
population$breeding[[current.gen+1]][[8 + sex]] =  population$breeding[[current.gen+1]][[8 + sex]][,-remove1,drop=FALSE]
population$breeding[[current.gen+1]][[10 + sex]] =  population$breeding[[current.gen+1]][[10 + sex]][-remove1]
population$breeding[[current.gen+1]][[12 + sex]] =  population$breeding[[current.gen+1]][[12 + sex]][-remove1]
population$breeding[[current.gen+1]][[14 + sex]] =  population$breeding[[current.gen+1]][[14 + sex]][-remove1]
population$breeding[[current.gen+1]][[16 + sex]] =  population$breeding[[current.gen+1]][[16 + sex]][-remove1]
population$breeding[[current.gen+1]][[18 + sex]] =  population$breeding[[current.gen+1]][[18 + sex]][,-remove1,drop=FALSE]
population$breeding[[current.gen+1]][[20 + sex]] =  population$breeding[[current.gen+1]][[20 + sex]][,-remove1,drop=FALSE]
population$breeding[[current.gen+1]][[22 + sex]] =  population$breeding[[current.gen+1]][[22 + sex]][-remove1]
population$breeding[[current.gen+1]][[24 + sex]] =  population$breeding[[current.gen+1]][[24 + sex]][-remove1]
population$breeding[[current.gen+1]][[26 + sex]] =  population$breeding[[current.gen+1]][[26 + sex]][,-remove1,drop=FALSE]
population$breeding[[current.gen+1]][[28 + sex]] =  population$breeding[[current.gen+1]][[28 + sex]][,-remove1,drop=FALSE]
population$breeding[[current.gen+1]][[30 + sex]] =  population$breeding[[current.gen+1]][[30 + sex]][-remove1]
population$breeding[[current.gen+1]][[32 + sex]] =  population$breeding[[current.gen+1]][[32 + sex]][-remove1]
population$breeding[[current.gen+1]][[34 + sex]] =  population$breeding[[current.gen+1]][[34 + sex]][-remove1]
population$breeding[[current.gen+1]][[36 + sex]] =  population$breeding[[current.gen+1]][[36 + sex]][-remove1]
population$breeding[[current.gen+1]][[38 + sex]] =  population$breeding[[current.gen+1]][[38 + sex]][-remove1]
population$breeding[[current.gen+1]][[40 + sex]] =  population$breeding[[current.gen+1]][[40 + sex]][-remove1]
population$breeding[[current.gen+1]][[42 + sex]] =  population$breeding[[current.gen+1]][[42 + sex]][-remove1]
population$breeding[[current.gen+1]][[44 + sex]] =  population$breeding[[current.gen+1]][[44 + sex]][-remove1]
}
}
} else{
if(verbose && generation.cores==1){
cat(paste0("Successfully generated ", breeding.size.total, " individuals.\n"))
}
}
if(store.comp.times.generation.temp2){
tack <- as.numeric(Sys.time())
pre_stuff <- pre_stuff + tack -tick
}
generation.cores
fixed.breeding_parallel
if(ncol(fixed.breeding_parallel)<7){
fixed.breeding_parallel <- cbind(fixed.breeding_parallel, sex.animal-1)
}
parallel_batch <- list()
size_batch <- ceiling(breeding.size.total / generation.cores)
for(batch in 1:generation.cores){
parallel_batch[[batch]] <- fixed.breeding_parallel[(1+(batch-1)*size_batch):min(breeding.size.total,(batch*size_batch)) ,]
}
# Windows Parallel
doParallel::registerDoParallel(cores=generation.cores)
p1 <- foreach::foreach(indexb=1:generation.cores,
.packages="MoBPS") %dopar% {
pop1 <- breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[indexb]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
verbose=FALSE,
store.comp.times.generation = FALSE,
parallel.internal=TRUE)
}
doParallel::stopImplicitCluster()
if(store.comp.times.generation){
tock <- as.numeric(Sys.time())
parallel_gen  <- parallel_gen  + tock -tack
}
activ_male <- length(population$breeding[[current.gen+1]][[1]])
activ_male
current.gen
activ_male <- length(population$breeding[[current.gen+1]][[1]])
activ_female <- length(population$breeding[[current.gen+1]][[2]])
size_sex <- c(activ_male, activ_female)
generation.cores
index
sex
adds <- c(length(p1[[index]][[sex]]))
adds
length(p1[[index]][[sex]])>0)
length(p1[[index]][[sex]])>0
index
length(p1)<index | length(p1[[index]]) < (36+ sex)
for(tab in c(2,6,8,18,20,26,28)){
population$breeding[[current.gen+1]][[tab+sex]][,1:adds+size_sex[sex]] <- p1[[index]][[tab+sex]]
}
for(vec in c(4,10,12,14,16,22,24,30,32,34,36,38,40,42,44)){
population$breeding[[current.gen+1]][[vec+sex]][1:adds+size_sex[sex]] <- p1[[index]][[vec+sex]]
}
p1[[index]][[vec+sex]]
p1[[index]]
population$breeding[[2]]
pop1 = creating.diploid(nsnp = 100, nindi = 5)
pop1 = breeding.diploid(pop1, fixed.breeding.best = cbind(1,1))
pop1 = breeding.diploid(pop1, fixed.breeding.best = cbind(1,1,1,1))
pop1 = breeding.diploid(pop1, fixed.breeding = cbind(1,1,1,1,1,1))
pop1$breeding[[2]]
summary(population_parallel)
population_parallel$breeding[[1]][[44]]
population_parallel$breeding[[1]][[45]]
population_parallel$breeding[[1]][[46]]
p1
parallel_batch[[indexb]]
parallel_batch
pop1 <- breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[indexb]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
verbose=FALSE,
store.comp.times.generation = FALSE,
parallel.internal=TRUE)
indexb = 1
pop1 <- breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[indexb]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
verbose=FALSE,
store.comp.times.generation = FALSE,
parallel.internal=TRUE)
breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[indexb]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
verbose=FALSE,
store.comp.times.generation = FALSE,
parallel.internal=TRUE)
# Windows Parallel
doParallel::registerDoParallel(cores=generation.cores)
p1 <- foreach::foreach(indexb=1:generation.cores,
.packages="MoBPS") %dopar% {
pop1 <- breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[indexb]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
verbose=FALSE,
store.comp.times.generation = FALSE,
parallel.internal=TRUE)
}
pop1 <- breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[indexb]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
verbose=FALSE,
store.comp.times.generation = FALSE,
parallel.internal=TRUE)
devtools::load_all()
pop1 <- breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[indexb]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
verbose=FALSE,
store.comp.times.generation = FALSE,
parallel.internal=TRUE)
pop1$breeding
pop1
if(Sys.info()[['sysname']]=="Windows"){
# Windows Parallel
doParallel::registerDoParallel(cores=generation.cores)
p1 <- foreach::foreach(indexb=1:generation.cores,
.packages="MoBPS") %dopar% {
pop1 <- breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[indexb]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
verbose=FALSE,
store.comp.times.generation = FALSE,
parallel.internal=TRUE)
}
doParallel::stopImplicitCluster()
} else{
success = FALSE
counter = 0
while(!success){
p1 <- parallel::mclapply(1:generation.cores, function(x) breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[x]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
parallel.internal=TRUE,
store.comp.times.generation = FALSE,
verbose=FALSE),
mc.cores=generation.cores)
success = TRUE
for(index in 1:length(p1)){
if(length(p1[[index]])==1 & counter < 10){
success = FALSE
counter = counter+1
}
}
if(!success){
save(file = paste0(counter, "sim.RData"), list=c("counter"))
}
}
}
p1
p1 <- foreach::foreach(indexb=1:generation.cores) %dopar% {
pop1 <- breeding.diploid(population_parallel, fixed.breeding = parallel_batch[[indexb]],
mutation.rate = mutation.rate,
remutation.rate = remutation.rate,
recombination.rate = recombination.rate,
recom.f.indicator = recom.f.indicator,
duplication.rate = duplication.rate,
duplication.length = duplication.length,
duplication.recombination = duplication.recombination, delete.same.origin=delete.same.origin,
gene.editing.offspring = gene.editing.offspring,
gene.editing.best = gene.editing.best,
gene.editing.offspring.sex = gene.editing.offspring.sex,
gene.editing.best.sex = gene.editing.best.sex,
nr.edits= nr.edits,
gen.architecture.m=gen.architecture.m,
gen.architecture.f=gen.architecture.f,
phenotyping.child = phenotyping.child,
n.observation = n.observation,
copy.individual = copy.individual,
copy.individual.keep.pheno = copy.individual.keep.pheno,
copy.individual.keep.bve = copy.individual.keep.bve,
added.genotyped = added.genotyped,
share.genotyped = share.genotyped,
bv.ignore.traits = bv.ignore.traits,
heritability = heritability,
sigma.e =sigma.e,
dh.mating = dh.mating,
dh.sex = dh.sex,
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
same.sex.selfing = same.sex.selfing,
selfing.mating = selfing.mating,
selfing.sex = selfing.sex,
verbose=FALSE,
store.comp.times.generation = FALSE,
parallel.internal=TRUE)
}
devtools::load_all()
devtools::install_local()
library(MoBPS)
detach("package:MoBPS", unload = TRUE)
sessionInfo()
devtools::install_local()
devtools::build()
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
library(MoBPS)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
install.packages("rlang")
install.packages("rlang")
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::load_all()
