genotyped_array[non_copy, population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[22]]] <- TRUE
}
}
genotype.included <- which(genotyped==1)
database_genotyped = get.database(population, database = bve.database, per.individual = TRUE)[genotype.included,]
database_genotyped = get.database(population, database = database_genotyped)
database_genotyped
get.id(population, database = database_genotyped)
duplicated(get.id(population, database = database_genotyped))
get.id(population, database = database_genotyped)[1:50]
duplicated(get.id(population, database = database_genotyped))
duplicated(get.id(population, database = database_genotyped))[1:50]
duplicated(get.id(population, database = database_genotyped))[40]
duplicated(get.id(population, database = database_genotyped))[30]
get.id(population, database = database_genotyped)[30]
get.id(population, database = database_genotyped)==25669
which(get.id(population, database = database_genotyped)==25669)
# remove non-genotyped samples in case no pedigree-based estimation // single-step
if(singlestep.active==FALSE && (relationship.matrix!="kinship" && relationship.matrix !="pedigree")){
for(index in 1:n.animals){
k.database <- bve.database[loop_elements[index,3],]
kindex <- loop_elements[index,2]
genotyped[index] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]
}
if(n.rep>0){
genotyped.copy <- numeric(n.rep)
for(index in 1:n.rep){
kindex <- loop_elements_copy[index,2]
k.database <- bve.database[loop_elements_copy[index,3],]
if(population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]==1){
genotyped[loop_elements_copy[index,6]] <-  genotyped.copy[index] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]
}
}
remove.loop.elements <- which(genotyped.copy==0)
if(length(remove.loop.elements)>0 && FALSE){
loop_elements_list[[3]] <- loop_elements_list[[3]][-remove.loop.elements,]
}
}
stay.loop.elements <- which(genotyped==1)
remove.loop.elements <- which(genotyped==0)
if(length(remove.loop.elements)>0){
loop_elements_list[[1]] <- loop_elements_list[[1]][-remove.loop.elements,]
loop_elements_list[[2]] <- loop_elements_list[[2]][-remove.loop.elements]
}
if(length(remove.loop.elements)>0){
warning("Use of GBLUP although some individuals are not genotyped. Non-genotyped individuals have been automatically removed from the BVE.\nConsider use ssGBLUP (singlestep.active = TRUE) oder pBLUP (relationship.matrix ='pedigree') ")
}
loop_elements <- loop_elements_list[[1]]
n.animals <- nrow(loop_elements)
loop_elements_list[[1]][,1] <- 1:n.animals
genotyped <- numeric(n.animals)
}
y <- y_real <- y_real2 <- y_hat <- y_reli <- y_parent <- array(0,dim=c(n.animals,population$info$bv.nr))
if(variance.correction=="parental.mean" || variance.correction=="generation.mean"){
generation_mean <- matrix(0, ncol=max(bve.database[,1]), nrow=population$info$bv.nr)
for(index in unique(bve.database[,1])){
generation_mean[,index] <- rowMeans(get.bv(population, gen=index), na.rm = TRUE)
}
}
if(variance.correction=="parental.mean"){
y_p1 <- y_p2 <- array(0,dim=c(n.animals,population$info$bv.nr))
}
X_fixed <- matrix(0, nrow=n.animals,ncol=ncol(population$info$fixed.effects))
grid.position <- numeric(n.animals)
cindex <- 1
size <- cumsum(c(0,as.vector(t(population$info$size))))
y_obs <- matrix(0, nrow=n.animals, ncol=population$info$bv.nr)
genotyped_array <- matrix(FALSE, ncol=length(population$info$array.name), nrow=n.animals)
n.animals
# Import phenotypes / genomic values
for(index in 1:n.animals){
k.database <- bve.database[loop_elements[index,3],]
kindex <- loop_elements[index,2]
y[index,] <- population$breeding[[k.database[[1]]]][[8+k.database[[2]]]][,kindex]
y_real[index,] <- y_real2[index,] <-population$breeding[[k.database[[1]]]][[6+k.database[[2]]]][,kindex]
if(variance.correction=="parental.mean"){
p1 <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[7]]
y_p1[index,] <- population$breeding[[p1[1]]][[6+p1[2]]][,p1[3]]
p2 <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[8]]
y_p2[index,] <- population$breeding[[p2[1]]][[6+p2[2]]][,p2[3]]
if(p1[1]==k.database[1]){
y_p1[index,] <- generation_mean[,p1[1]]
}
if(p2[1]==k.database[1]){
y_p2[index,] <- generation_mean[,p2[1]]
}
}
if(population$breeding[[k.database[1]]][[k.database[[2]]]][[kindex]][[25]]==FALSE){
if(length(population$breeding[[k.database[1]]][[k.database[[2]]]][[kindex]][[26]])==0){
y_real2[index,] <- NA
} else{
y_real2[index,-population$breeding[[k.database[1]]][[k.database[[2]]]][[kindex]][[26]]] <- NA
}
}
X_fixed[index,] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[28]]
y_obs[index,] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]]
grid.position[index] <- kindex + size[sum(k.database[1:2]*c(2,1))-2] # how many individuals are in earlier generations
genotyped[index] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]
genotyped_array[index, population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[22]]] <- TRUE
if(bve.all.genotyped){
genotyped[index] <- 1
genotyped_array[index, ] <- TRUE
}
if(estimate.add.gen.var){
father <- population$breeding[[k.database[1]]][[k.database[2]]][[kindex]][[7]]
mother <- population$breeding[[k.database[1]]][[k.database[2]]][[kindex]][[8]]
if(sum(father[1:3]==c(k.database[1:2], kindex))==3 ||sum(mother[1:3]==c(k.database[1:2], kindex))==3){
if(verbose) cat("Schaetzung der additiv genetischen Varianz extrem problematisch. Kein Elterntier fuer jedes Tier vorhanden!\n")
}
y_parent[index,] <- mean(population$breeding[[father[1]]][[8+father[2]]][,father[3]],population$breeding[[mother[1]]][[8+mother[2]]][,mother[3]])
}
}
sum(genotyped)
n.rep
if(n.rep>0){
for(index in 1:n.rep){
kindex <- loop_elements_copy[index,2]
k.database <- bve.database[loop_elements_copy[index,3],]
if(length(stay.loop.elements)>0){
non_copy <- which(stay.loop.elements==loop_elements_copy[index,6])
} else{
non_copy <- loop_elements_copy[index,6]
}
if(length(non_copy)==1 && sum(population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]]> y_obs[non_copy,])>=1){
switches <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]]> y_obs[non_copy,]
y[non_copy,switches] <- population$breeding[[k.database[[1]]]][[8+k.database[[2]]]][switches,kindex]
y_obs[non_copy,switches] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]][switches]
if(length(switches)>0){
X_fixed[non_copy,] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[28]]
}
}
}
}
nrow(loop_elements_list[[3]])>0
genotype.included <- which(genotyped==1)
database_genotyped = get.database(population, database = bve.database, per.individual = TRUE)[genotype.included,]
database_genotyped = get.database(population, database = database_genotyped)
sum(duplicated(get.id(population, database = database_genotyped)))
if(nrow(loop_elements_list[[3]])>0){
for(index in 1:nrow(loop_elements_list[[3]])){
kindex <- loop_elements_list[[3]][index,2]
k.database <- bve.database[loop_elements_list[[3]][index,3],]
if(length(stay.loop.elements)>0){
non_copy <- which(stay.loop.elements==loop_elements_copy[index,6])
} else{
non_copy <- loop_elements_copy[index,6]
}
genotyped[non_copy] <- max(genotyped[non_copy],population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]])
genotyped_array[non_copy, population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[22]]] <- TRUE
}
}
database_genotyped = get.database(population, database = bve.database, per.individual = TRUE)[genotype.included,]
database_genotyped = get.database(population, database = database_genotyped)
sum(duplicated(get.id(population, database = database_genotyped)))
genotype.included
if(population$info$litter.effect.active || population$info$pen.effect.active){
warning("Breeding value estimation method does not include pen or litter effects.")
}
if(length(bve.p_i.database)>0){
if(bve.p_i.exclude.nongenotyped){
keep1 = which(get.genotyped(population, database = bve.p_i.database))
keep1 = keep1[!duplicated(get.id(population, database = bve.p_i.database)[keep1])]
} else{
keep1 = which(!duplicated(get.id(population, database = bve.p_i.database)))
}
bve.p_i.list = rowMeans(get.geno(population, database = bve.p_i.database)[,keep1, drop = FALSE])/2
}
dense = NULL # File used for MixBLUP
dim_dense = c(0,0)
if(verbose && (relationship.matrix!="kinship" && relationship.matrix !="pedigree")) cat("Start genomic BVE.\n")
if(verbose && (relationship.matrix=="kinship" || relationship.matrix =="pedigree")) cat("Start pedigree BVE.\n")
## Derive if individuals are using multiple times in the BVE
## Import Phenotypes from all copies of an individual (potentially use individual entry [[21]] for efficiency?)
loop_elements_list <- derive.loop.elements(population=population, bve.database=bve.database,
bve.class=bve.class, bve.avoid.duplicates=bve.avoid.duplicates,
store.which.adding = TRUE, list.of.copys = TRUE)
loop_elements <- loop_elements_list[[1]]
loop_elements_copy <- loop_elements_list[[3]]
n.animals <- nrow(loop_elements)
genotyped <- numeric(n.animals)
stay.loop.elements <- NULL
n.rep <- 0
if(length(loop_elements_copy)>0){
n.rep <- nrow(loop_elements_copy)
}
# remove non-genotyped samples in case no pedigree-based estimation // single-step
if(singlestep.active==FALSE && (relationship.matrix!="kinship" && relationship.matrix !="pedigree")){
for(index in 1:n.animals){
k.database <- bve.database[loop_elements[index,3],]
kindex <- loop_elements[index,2]
genotyped[index] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]
}
if(n.rep>0){
genotyped.copy <- numeric(n.rep)
for(index in 1:n.rep){
kindex <- loop_elements_copy[index,2]
k.database <- bve.database[loop_elements_copy[index,3],]
if(population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]==1){
genotyped[loop_elements_copy[index,6]] <-  genotyped.copy[index] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]
}
}
remove.loop.elements <- which(genotyped.copy==0)
if(length(remove.loop.elements)>0 && FALSE){
loop_elements_list[[3]] <- loop_elements_list[[3]][-remove.loop.elements,]
}
}
stay.loop.elements <- which(genotyped==1)
remove.loop.elements <- which(genotyped==0)
if(length(remove.loop.elements)>0){
loop_elements_list[[1]] <- loop_elements_list[[1]][-remove.loop.elements,]
loop_elements_list[[2]] <- loop_elements_list[[2]][-remove.loop.elements]
}
if(length(remove.loop.elements)>0){
warning("Use of GBLUP although some individuals are not genotyped. Non-genotyped individuals have been automatically removed from the BVE.\nConsider use ssGBLUP (singlestep.active = TRUE) oder pBLUP (relationship.matrix ='pedigree') ")
}
loop_elements <- loop_elements_list[[1]]
n.animals <- nrow(loop_elements)
loop_elements_list[[1]][,1] <- 1:n.animals
genotyped <- numeric(n.animals)
}
y <- y_real <- y_real2 <- y_hat <- y_reli <- y_parent <- array(0,dim=c(n.animals,population$info$bv.nr))
if(variance.correction=="parental.mean" || variance.correction=="generation.mean"){
generation_mean <- matrix(0, ncol=max(bve.database[,1]), nrow=population$info$bv.nr)
for(index in unique(bve.database[,1])){
generation_mean[,index] <- rowMeans(get.bv(population, gen=index), na.rm = TRUE)
}
}
if(variance.correction=="parental.mean"){
y_p1 <- y_p2 <- array(0,dim=c(n.animals,population$info$bv.nr))
}
X_fixed <- matrix(0, nrow=n.animals,ncol=ncol(population$info$fixed.effects))
grid.position <- numeric(n.animals)
cindex <- 1
size <- cumsum(c(0,as.vector(t(population$info$size))))
y_obs <- matrix(0, nrow=n.animals, ncol=population$info$bv.nr)
genotyped_array <- matrix(FALSE, ncol=length(population$info$array.name), nrow=n.animals)
# Import phenotypes / genomic values
for(index in 1:n.animals){
k.database <- bve.database[loop_elements[index,3],]
kindex <- loop_elements[index,2]
y[index,] <- population$breeding[[k.database[[1]]]][[8+k.database[[2]]]][,kindex]
y_real[index,] <- y_real2[index,] <-population$breeding[[k.database[[1]]]][[6+k.database[[2]]]][,kindex]
if(variance.correction=="parental.mean"){
p1 <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[7]]
y_p1[index,] <- population$breeding[[p1[1]]][[6+p1[2]]][,p1[3]]
p2 <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[8]]
y_p2[index,] <- population$breeding[[p2[1]]][[6+p2[2]]][,p2[3]]
if(p1[1]==k.database[1]){
y_p1[index,] <- generation_mean[,p1[1]]
}
if(p2[1]==k.database[1]){
y_p2[index,] <- generation_mean[,p2[1]]
}
}
if(population$breeding[[k.database[1]]][[k.database[[2]]]][[kindex]][[25]]==FALSE){
if(length(population$breeding[[k.database[1]]][[k.database[[2]]]][[kindex]][[26]])==0){
y_real2[index,] <- NA
} else{
y_real2[index,-population$breeding[[k.database[1]]][[k.database[[2]]]][[kindex]][[26]]] <- NA
}
}
X_fixed[index,] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[28]]
y_obs[index,] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]]
grid.position[index] <- kindex + size[sum(k.database[1:2]*c(2,1))-2] # how many individuals are in earlier generations
genotyped[index] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]
genotyped_array[index, population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[22]]] <- TRUE
if(bve.all.genotyped){
genotyped[index] <- 1
genotyped_array[index, ] <- TRUE
}
if(estimate.add.gen.var){
father <- population$breeding[[k.database[1]]][[k.database[2]]][[kindex]][[7]]
mother <- population$breeding[[k.database[1]]][[k.database[2]]][[kindex]][[8]]
if(sum(father[1:3]==c(k.database[1:2], kindex))==3 ||sum(mother[1:3]==c(k.database[1:2], kindex))==3){
if(verbose) cat("Schaetzung der additiv genetischen Varianz extrem problematisch. Kein Elterntier fuer jedes Tier vorhanden!\n")
}
y_parent[index,] <- mean(population$breeding[[father[1]]][[8+father[2]]][,father[3]],population$breeding[[mother[1]]][[8+mother[2]]][,mother[3]])
}
}
if(n.rep>0){
for(index in 1:n.rep){
kindex <- loop_elements_copy[index,2]
k.database <- bve.database[loop_elements_copy[index,3],]
if(length(stay.loop.elements)>0){
non_copy <- which(stay.loop.elements==loop_elements_copy[index,6])
} else{
non_copy <- loop_elements_copy[index,6]
}
if(length(non_copy)==1 && sum(population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]]> y_obs[non_copy,])>=1){
switches <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]]> y_obs[non_copy,]
y[non_copy,switches] <- population$breeding[[k.database[[1]]]][[8+k.database[[2]]]][switches,kindex]
y_obs[non_copy,switches] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]][switches]
if(length(switches)>0){
X_fixed[non_copy,] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[28]]
}
}
}
}
# Check if some copy is genotyped
if(nrow(loop_elements_list[[3]])>0){
for(index in 1:nrow(loop_elements_list[[3]])){
kindex <- loop_elements_list[[3]][index,2]
k.database <- bve.database[loop_elements_list[[3]][index,3],]
if(length(stay.loop.elements)>0){
non_copy <- which(stay.loop.elements==loop_elements_copy[index,6])
} else{
non_copy <- loop_elements_copy[index,6]
}
genotyped[non_copy] <- max(genotyped[non_copy],population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]])
genotyped_array[non_copy, population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[22]]] <- TRUE
}
}
genotype.included <- which(genotyped==1)
genotype.included
genotyped
## "proper" breeding value estimation
if(population$info$litter.effect.active || population$info$pen.effect.active){
warning("Breeding value estimation method does not include pen or litter effects.")
}
if(length(bve.p_i.database)>0){
if(bve.p_i.exclude.nongenotyped){
keep1 = which(get.genotyped(population, database = bve.p_i.database))
keep1 = keep1[!duplicated(get.id(population, database = bve.p_i.database)[keep1])]
} else{
keep1 = which(!duplicated(get.id(population, database = bve.p_i.database)))
}
bve.p_i.list = rowMeans(get.geno(population, database = bve.p_i.database)[,keep1, drop = FALSE])/2
}
dense = NULL # File used for MixBLUP
dim_dense = c(0,0)
if(verbose && (relationship.matrix!="kinship" && relationship.matrix !="pedigree")) cat("Start genomic BVE.\n")
if(verbose && (relationship.matrix=="kinship" || relationship.matrix =="pedigree")) cat("Start pedigree BVE.\n")
## Derive if individuals are using multiple times in the BVE
## Import Phenotypes from all copies of an individual (potentially use individual entry [[21]] for efficiency?)
loop_elements_list <- derive.loop.elements(population=population, bve.database=bve.database,
bve.class=bve.class, bve.avoid.duplicates=bve.avoid.duplicates,
store.which.adding = TRUE, list.of.copys = TRUE)
loop_elements <- loop_elements_list[[1]]
loop_elements_copy <- loop_elements_list[[3]]
n.animals <- nrow(loop_elements)
genotyped <- numeric(n.animals)
stay.loop.elements <- NULL
n.rep <- 0
if(length(loop_elements_copy)>0){
n.rep <- nrow(loop_elements_copy)
}
# remove non-genotyped samples in case no pedigree-based estimation // single-step
if(singlestep.active==FALSE && (relationship.matrix!="kinship" && relationship.matrix !="pedigree")){
for(index in 1:n.animals){
k.database <- bve.database[loop_elements[index,3],]
kindex <- loop_elements[index,2]
genotyped[index] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]
}
if(n.rep>0){
genotyped.copy <- numeric(n.rep)
for(index in 1:n.rep){
kindex <- loop_elements_copy[index,2]
k.database <- bve.database[loop_elements_copy[index,3],]
if(population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]==1){
genotyped[loop_elements_copy[index,6]] <-  genotyped.copy[index] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]
}
}
remove.loop.elements <- which(genotyped.copy==0)
if(length(remove.loop.elements)>0 && FALSE){
loop_elements_list[[3]] <- loop_elements_list[[3]][-remove.loop.elements,]
}
}
stay.loop.elements <- which(genotyped==1)
remove.loop.elements <- which(genotyped==0)
if(length(remove.loop.elements)>0){
loop_elements_list[[1]] <- loop_elements_list[[1]][-remove.loop.elements,]
loop_elements_list[[2]] <- loop_elements_list[[2]][-remove.loop.elements]
}
if(length(remove.loop.elements)>0){
warning("Use of GBLUP although some individuals are not genotyped. Non-genotyped individuals have been automatically removed from the BVE.\nConsider use ssGBLUP (singlestep.active = TRUE) oder pBLUP (relationship.matrix ='pedigree') ")
}
loop_elements <- loop_elements_list[[1]]
n.animals <- nrow(loop_elements)
loop_elements_list[[1]][,1] <- 1:n.animals
genotyped <- numeric(n.animals)
}
y <- y_real <- y_real2 <- y_hat <- y_reli <- y_parent <- array(0,dim=c(n.animals,population$info$bv.nr))
if(variance.correction=="parental.mean" || variance.correction=="generation.mean"){
generation_mean <- matrix(0, ncol=max(bve.database[,1]), nrow=population$info$bv.nr)
for(index in unique(bve.database[,1])){
generation_mean[,index] <- rowMeans(get.bv(population, gen=index), na.rm = TRUE)
}
}
if(variance.correction=="parental.mean"){
y_p1 <- y_p2 <- array(0,dim=c(n.animals,population$info$bv.nr))
}
X_fixed <- matrix(0, nrow=n.animals,ncol=ncol(population$info$fixed.effects))
grid.position <- numeric(n.animals)
cindex <- 1
size <- cumsum(c(0,as.vector(t(population$info$size))))
y_obs <- matrix(0, nrow=n.animals, ncol=population$info$bv.nr)
genotyped_array <- matrix(FALSE, ncol=length(population$info$array.name), nrow=n.animals)
# Import phenotypes / genomic values
for(index in 1:n.animals){
k.database <- bve.database[loop_elements[index,3],]
kindex <- loop_elements[index,2]
y[index,] <- population$breeding[[k.database[[1]]]][[8+k.database[[2]]]][,kindex]
y_real[index,] <- y_real2[index,] <-population$breeding[[k.database[[1]]]][[6+k.database[[2]]]][,kindex]
if(variance.correction=="parental.mean"){
p1 <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[7]]
y_p1[index,] <- population$breeding[[p1[1]]][[6+p1[2]]][,p1[3]]
p2 <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[8]]
y_p2[index,] <- population$breeding[[p2[1]]][[6+p2[2]]][,p2[3]]
if(p1[1]==k.database[1]){
y_p1[index,] <- generation_mean[,p1[1]]
}
if(p2[1]==k.database[1]){
y_p2[index,] <- generation_mean[,p2[1]]
}
}
if(population$breeding[[k.database[1]]][[k.database[[2]]]][[kindex]][[25]]==FALSE){
if(length(population$breeding[[k.database[1]]][[k.database[[2]]]][[kindex]][[26]])==0){
y_real2[index,] <- NA
} else{
y_real2[index,-population$breeding[[k.database[1]]][[k.database[[2]]]][[kindex]][[26]]] <- NA
}
}
X_fixed[index,] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[28]]
y_obs[index,] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]]
grid.position[index] <- kindex + size[sum(k.database[1:2]*c(2,1))-2] # how many individuals are in earlier generations
genotyped[index] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]]
genotyped_array[index, population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[22]]] <- TRUE
if(bve.all.genotyped){
genotyped[index] <- 1
genotyped_array[index, ] <- TRUE
}
if(estimate.add.gen.var){
father <- population$breeding[[k.database[1]]][[k.database[2]]][[kindex]][[7]]
mother <- population$breeding[[k.database[1]]][[k.database[2]]][[kindex]][[8]]
if(sum(father[1:3]==c(k.database[1:2], kindex))==3 ||sum(mother[1:3]==c(k.database[1:2], kindex))==3){
if(verbose) cat("Schaetzung der additiv genetischen Varianz extrem problematisch. Kein Elterntier fuer jedes Tier vorhanden!\n")
}
y_parent[index,] <- mean(population$breeding[[father[1]]][[8+father[2]]][,father[3]],population$breeding[[mother[1]]][[8+mother[2]]][,mother[3]])
}
}
if(n.rep>0){
for(index in 1:n.rep){
kindex <- loop_elements_copy[index,2]
k.database <- bve.database[loop_elements_copy[index,3],]
if(length(stay.loop.elements)>0){
non_copy <- which(stay.loop.elements==loop_elements_copy[index,6])
} else{
non_copy <- loop_elements_copy[index,6]
}
if(length(non_copy)==1 && sum(population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]]> y_obs[non_copy,])>=1){
switches <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]]> y_obs[non_copy,]
y[non_copy,switches] <- population$breeding[[k.database[[1]]]][[8+k.database[[2]]]][switches,kindex]
y_obs[non_copy,switches] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[15]][switches]
if(length(switches)>0){
X_fixed[non_copy,] <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[28]]
}
}
}
}
genotype.included <- which(genotyped==1)
genotype.included
sum(genotyped)
loop_elements_list[[3]]
get.id(population, database = database_genotyped)
length(get.id(population, database = database_genotyped))
length(unique(get.id(population, database = database_genotyped)))
# Check if some copy is genotyped
if(nrow(loop_elements_list[[3]])>0){
for(index in 1:nrow(loop_elements_list[[3]])){
kindex <- loop_elements_list[[3]][index,2]
k.database <- bve.database[loop_elements_list[[3]][index,3],]
if(length(stay.loop.elements)>0){
non_copy <- which(stay.loop.elements==loop_elements_copy[index,6])
} else{
non_copy <- loop_elements_copy[index,6]
}
genotyped[non_copy] <- max(genotyped[non_copy],population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[16]])
genotyped_array[non_copy, population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[22]]] <- TRUE
}
}
genotype.included <- which(genotyped==1)
database_genotyped = get.database(population, database = bve.database, per.individual = TRUE)[genotype.included,]
database_genotyped = get.database(population, database = database_genotyped)
length(get.id(population, database = database_genotyped))
length(unique(get.id(population, database = database_genotyped)))
length(genotyped)
get.database(population, database = bve.database, per.individual = TRUE)
genotype.included
database_genotyped
loop_elements_list[[2]]
loop_elements_list
plot(loop_elements_list[[2]])
get.id(population, database = bve.database)
length(unique(get.id(population, database = bve.database)))
length(unique(get.id(population, database = bve.database)[loop_elements_list[[2]]]))
length(loop_elements_list[[2]])
genotype.included
length(unique(get.id(population, database = bve.database)[loop_elements_list[[2]]]))
length(unique(get.id(population, database = bve.database)[loop_elements_list[[2]]][genotype.included]))
database_genotyped = get.database(population, database = bve.database, per.individual = TRUE)[loop_elements_list[[3]],][genotype.included,]
database_genotyped
database_genotyped = get.database(population, database = database_genotyped)
database_genotyped
length(get.id(population, database = database_genotyped))
length(unique(get.id(population, database = database_genotyped)))
database_genotyped = get.database(population, database = bve.database, per.individual = TRUE)[loop_elements_list[[2]],][genotype.included,]
database_genotyped = get.database(population, database = database_genotyped)
length(get.id(population, database = database_genotyped))
length(unique(get.id(population, database = database_genotyped)))
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
roxygen2::roxygenise()
devtools::build()
