nfinal = 60+120, n.gen = 50)
# Use a genomic map from the MoBPSmap R-package
# Import genomic data from the dataset-matrix ((each individual has 2 haplotypes))
population <- creating.diploid(dataset = dataset[,1:100], nindi = 50,
sex.quota=0, map=map,
name.cohort = "1yearRams_0")
population <- creating.diploid(dataset = dataset[,101:120], population = population, nindi = 10,
sex.quota=0, name.cohort = "2yearRams_0")
population <- creating.diploid(dataset = dataset[,121:220], population = population, nindi = 50,
share.genotyped = 1, sex.quota=1, name.cohort = "1yearEwes_0")
population <- creating.diploid(dataset = dataset[,221:300], population = population, nindi = 40,
share.genotyped = 1, sex.quota=1, name.cohort = "2yearEwes_0")
population <- creating.diploid(dataset = dataset[,301:360], population = population, nindi = 30,
share.genotyped = 1, sex.quota=1, name.cohort = "3yearEwes_0")
summary(population)
# Use of two correlated traits
population <- creating.trait(population, n.additive = c(1000,1000), mean.target = 100, var.target = c(30,20),
trait.cor = matrix(c(1, 0.2, 0.2,1), nrow=2))
# first column: Size of the litter
# second column: probability of the litter size to occur
litter_size <- matrix(c(2, 0.5,
3, 0.3,
4, 0.2), ncol=2, byrow=TRUE)
# phenotypes for the second trait are only generated for selected cohorts
population <- breeding.diploid(population, phenotyping.gen = 1,
heritability = c(0.3,0.2), n.observation = c(1,0))
population <- breeding.diploid(population, phenotyping.cohorts = c("2yearRams_0", "2yearEwes_0", "3yearEwes_0"),
heritability = c(0.3,0.2), n.observation = c(0,1))
# As some individuals are non genotyped a genomic breeding value estimation does not work
# Either use a pedigree-based evaluation or single-step
# Otherwise non-genotyped individuals will automatically be removed for the estimation
population <- breeding.diploid(population, bve = TRUE,
bve.cohorts = c("1yearRams_0", "2yearRams_0", "1yearEwes_0", "2yearEwes_0", "3yearEwes_0"))
for(index in 1:20){
population <- breeding.diploid(population, breeding.size = c(50,50),
selection.m.cohorts = paste0("2yearRams_",index-1),
selection.f.cohorts = paste0(c("2yearEwes_", "3yearEwes_"), index-1),
name.cohort = paste0("NewOffspring_", index),
repeat.mating = litter_size,
share.genotyped = 0)
}
options(warn = 2)
set.seed(42)
library(MoBPS)
# Use MoBPSmaps when available
if (requireNamespace("MoBPSmaps", quietly = TRUE)) {
map <- MoBPSmaps::map_sheep2
} else{
map <- NULL
}
# Simulation of the LD build up
dataset <- founder.simulation(nindi=100, map = map,
nfinal = 60+120, n.gen = 50)
# Use a genomic map from the MoBPSmap R-package
# Import genomic data from the dataset-matrix ((each individual has 2 haplotypes))
population <- creating.diploid(dataset = dataset[,1:100], nindi = 50, sex.quota=0, map=map,
name.cohort = "1yearRams_0")
population <- creating.diploid(dataset = dataset[,101:120], population = population, nindi = 10,
sex.quota=0, name.cohort = "2yearRams_0")
population <- creating.diploid(dataset = dataset[,121:220], population = population, nindi = 50,
share.genotyped = 1, sex.quota=1, name.cohort = "1yearEwes_0")
population <- creating.diploid(dataset = dataset[,221:300], population = population, nindi = 40,
share.genotyped = 1, sex.quota=1, name.cohort = "2yearEwes_0")
population <- creating.diploid(dataset = dataset[,301:360], population = population, nindi = 30,
share.genotyped = 1, sex.quota=1, name.cohort = "3yearEwes_0")
summary(population)
# Use of two correlated traits
population <- creating.trait(population, n.additive = c(1000,1000), mean.target = 100,
var.target = c(30,20),
trait.cor = matrix(c(1, 0.2, 0.2,1), nrow=2))
# first column: Size of the litter
# second column: probability of the litter size to occur
litter_size <- matrix(c(2, 0.5,
3, 0.3,
4, 0.2), ncol=2, byrow=TRUE)
### We want to execute all the code below multiple times in succession
# This code should work generally to always to the last available cycles
# in case a cohort from cycle 0 is used below replace this with  paste0(COHORTNAME, "_", index)
# in case a cohort from cycle 1 is used below replace this with  paste0(COHORTNAME, "_", index + 1)
# For coding we would recommend to not directly code this with a loop but set index to 1
# Write the code for this case and afterwards add the loop
for(index in 1:20){
# phenotypes for the second trait are only generated for selected cohorts
population <- breeding.diploid(population, phenotyping.gen = index,
heritability = c(0.3,0.2), n.observation = c(1,0))
population <- breeding.diploid(population,
phenotyping.cohorts = paste0(c("2yearRams_", "2yearEwes_", "3yearEwes_"), index-1),
heritability = c(0.3,0.2), n.observation = c(0,1))
# As some individuals are non genotyped a genomic breeding value estimation does not work
# Either use a pedigree-based evaluation or single-step
# Otherwise non-genotyped individuals will automatically be removed for the estimation
population <- breeding.diploid(population, bve = TRUE, bve.gen = index,
bve.cohorts = paste0(c("1yearRams_", "2yearRams_", "1yearEwes_", "2yearEwes_", "3yearEwes_"), index-1))
# Generation of new individuals via reproduction
population <- breeding.diploid(population, breeding.size = c(50,50),
selection.m.cohorts = paste0("2yearRams_", index-1),
selection.f.cohorts = c(paste0("2yearEwes_",index-1), paste0("3yearEwes_",index-1)),
name.cohort = paste0("NewOffspring_",index),
repeat.mating = litter_size,
share.genotyped = 0
)
population <- breeding.diploid(population, breeding.size = c(50,0),
selection.size = c(50,0),
copy.individual.m = TRUE,
selection.m.cohorts = paste0("NewOffspring_",index, "_M"),
name.cohort = paste0("1yearRams_", index),
add.gen=index+1,
added.genotyped = 1
)
population <- breeding.diploid(population, breeding.size = c(0,50),
selection.size = c(0,50),
copy.individual.f = TRUE,
selection.f.cohorts = paste0("NewOffspring_",index, "_F"),
name.cohort = paste0("1yearEwes_", index),
add.gen=index+1,
added.genotyped = 0.5
)
# Generation of new individuals via selection
population <- breeding.diploid(population, breeding.size = c(10,0), selection.size = c(10,0),
selection.m.cohorts = paste0("1yearRams_", index-1),
copy.individual.m = TRUE,
selection.criteria = "bve",
add.gen=index+1,
name.cohort = paste0("2yearRams_", index))
population <- breeding.diploid(population, breeding.size = c(0,40),
selection.size = c(0,40),
selection.f.cohorts = paste0("1yearEwes_", index-1),
copy.individual.f = TRUE,
selection.criteria = "random",
add.gen=index+1,
name.cohort = paste0("2yearEwes_", index)
)
population <- breeding.diploid(population, breeding.size = c(0,30),
selection.size = c(0,30),
selection.f.cohorts = paste0("2yearEwes_", index-1),
copy.individual.f = TRUE,
selection.criteria = "random",
add.gen=index+1,
name.cohort = paste0("3yearEwes_", index)
)
}
options(warn = 1)
litter_size <- matrix(c(2, 0.5,
3, 0.3,
4, 0.2), ncol=2, byrow=TRUE)
population <- breeding.diploid(population, breeding.size = c(50,50),
selection.m.cohorts = paste0("2yearRams_", index-1),
selection.f.cohorts = c(paste0("2yearEwes_",index-1), paste0("3yearEwes_",index-1)),
name.cohort = paste0("NewOffspring_",index),
repeat.mating = litter_size,
share.genotyped = 0
)
population <- breeding.diploid(population, breeding.size = c(50,0),
selection.size = c(50,0),
copy.individual.m = TRUE,
selection.m.cohorts = paste0("NewOffspring_",index, "_M"),
name.cohort = paste0("1yearRams_", index),
add.gen=index+1,
added.genotyped = 1
)
population <- breeding.diploid(population, breeding.size = c(0,50),
selection.size = c(0,50),
copy.individual.f = TRUE,
selection.f.cohorts = paste0("NewOffspring_",index, "_F"),
name.cohort = paste0("1yearEwes_", index),
add.gen=index+1,
added.genotyped = 0.5
)
population <- breeding.diploid(population, breeding.size = c(10,0), selection.size = c(10,0),
selection.m.cohorts = paste0("1yearRams_", index-1),
copy.individual.m = TRUE,
selection.criteria = "bve",
add.gen=index+1,
name.cohort = paste0("2yearRams_", index))
population <- breeding.diploid(population, bve = TRUE, bve.gen = index,
bve.cohorts = paste0(c("1yearRams_", "2yearRams_", "1yearEwes_", "2yearEwes_", "3yearEwes_"), index-1))
index
BPSmap R-package
# Use a genomic map from the MoBPSmap R-package
# Import genomic data from the dataset-matrix ((each individual has 2 haplotypes))
population <- creating.diploid(dataset = dataset[,1:100], nindi = 50, sex.quota=0, map=map,
name.cohort = "1yearRams_0")
population <- creating.diploid(dataset = dataset[,101:120], population = population, nindi = 10,
sex.quota=0, name.cohort = "2yearRams_0")
population <- creating.diploid(dataset = dataset[,121:220], population = population, nindi = 50,
share.genotyped = 1, sex.quota=1, name.cohort = "1yearEwes_0")
population <- creating.diploid(dataset = dataset[,221:300], population = population, nindi = 40,
share.genotyped = 1, sex.quota=1, name.cohort = "2yearEwes_0")
population <- creating.diploid(dataset = dataset[,301:360], population = population, nindi = 30,
share.genotyped = 1, sex.quota=1, name.cohort = "3yearEwes_0")
summary(population)
population <- creating.trait(population, n.additive = c(1000,1000), mean.target = 100,
var.target = c(30,20),
trait.cor = matrix(c(1, 0.2, 0.2,1), nrow=2))
litter_size <- matrix(c(2, 0.5,
3, 0.3,
4, 0.2), ncol=2, byrow=TRUE)
index
population <- breeding.diploid(population, phenotyping.gen = index,
heritability = c(0.3,0.2), n.observation = c(1,0))
population <- breeding.diploid(population,
phenotyping.cohorts = paste0(c("2yearRams_", "2yearEwes_", "3yearEwes_"), index-1),
heritability = c(0.3,0.2), n.observation = c(0,1))
population <- breeding.diploid(population, bve = TRUE, bve.gen = index,
bve.cohorts = paste0(c("1yearRams_", "2yearRams_", "1yearEwes_", "2yearEwes_", "3yearEwes_"), index-1))
population <- breeding.diploid(population, breeding.size = c(50,50),
selection.m.cohorts = paste0("2yearRams_", index-1),
selection.f.cohorts = c(paste0("2yearEwes_",index-1), paste0("3yearEwes_",index-1)),
name.cohort = paste0("NewOffspring_",index),
repeat.mating = litter_size,
share.genotyped = 0
)
population <- breeding.diploid(population, breeding.size = c(50,0),
selection.size = c(50,0),
copy.individual.m = TRUE,
selection.m.cohorts = paste0("NewOffspring_",index, "_M"),
name.cohort = paste0("1yearRams_", index),
add.gen=index+1,
added.genotyped = 1
)
population <- breeding.diploid(population, breeding.size = c(0,50),
selection.size = c(0,50),
copy.individual.f = TRUE,
selection.f.cohorts = paste0("NewOffspring_",index, "_F"),
name.cohort = paste0("1yearEwes_", index),
add.gen=index+1,
added.genotyped = 0.5
)
population <- breeding.diploid(population, breeding.size = c(10,0), selection.size = c(10,0),
selection.m.cohorts = paste0("1yearRams_", index-1),
copy.individual.m = TRUE,
selection.criteria = "bve",
add.gen=index+1,
name.cohort = paste0("2yearRams_", index))
get.bve(population, cohorts = paste0("1yearRams_", index-1))
var(get.bve(population, cohorts = paste0("1yearRams_", index-1)))
var(t(get.bve(population, cohorts = paste0("1yearRams_", index-1))))
get.bve(population, cohorts = paste0("1yearRams_", index-1))
set.seed(42)
library(MoBPS)
# Use MoBPSmaps when available
if (requireNamespace("MoBPSmaps", quietly = TRUE)) {
map <- MoBPSmaps::map_sheep2
} else{
map <- NULL
}
# Simulation of the LD build up
dataset <- founder.simulation(nindi=100, map = map,
nfinal = 60+120, n.gen = 50)
# Use a genomic map from the MoBPSmap R-package
# Import genomic data from the dataset-matrix ((each individual has 2 haplotypes))
population <- creating.diploid(dataset = dataset[,1:100], nindi = 50,
sex.quota=0, map=map,
name.cohort = "1yearRams_0")
population <- creating.diploid(dataset = dataset[,101:120], population = population, nindi = 10,
sex.quota=0, name.cohort = "2yearRams_0")
population <- creating.diploid(dataset = dataset[,121:220], population = population, nindi = 50,
share.genotyped = 1, sex.quota=1, name.cohort = "1yearEwes_0")
population <- creating.diploid(dataset = dataset[,221:300], population = population, nindi = 40,
share.genotyped = 1, sex.quota=1, name.cohort = "2yearEwes_0")
population <- creating.diploid(dataset = dataset[,301:360], population = population, nindi = 30,
share.genotyped = 1, sex.quota=1, name.cohort = "3yearEwes_0")
summary(population)
population <- creating.trait(population, n.additive = c(1000,1000), mean.target = 100, var.target = c(30,20),
trait.cor = matrix(c(1, 0.2, 0.2,1), nrow=2))
litter_size <- matrix(c(2, 0.5,
3, 0.3,
4, 0.2), ncol=2, byrow=TRUE)
# phenotypes for the second trait are only generated for selected cohorts
population <- breeding.diploid(population, phenotyping.gen = 1,
heritability = c(0.3,0.2), n.observation = c(1,0))
population <- breeding.diploid(population, phenotyping.cohorts = c("2yearRams_0", "2yearEwes_0", "3yearEwes_0"),
heritability = c(0.3,0.2), n.observation = c(0,1))
population <- breeding.diploid(population, bve = TRUE,
bve.cohorts = c("1yearRams_0", "2yearRams_0", "1yearEwes_0", "2yearEwes_0", "3yearEwes_0"))
for(index in 1:20){
population <- breeding.diploid(population, breeding.size = c(50,50),
selection.m.cohorts = paste0("2yearRams_",index-1),
selection.f.cohorts = paste0(c("2yearEwes_", "3yearEwes_"), index-1),
name.cohort = paste0("NewOffspring_", index),
repeat.mating = litter_size,
share.genotyped = 0)
}
population <- breeding.diploid(population, breeding.size = c(50,0),
selection.size = c(50,0),
copy.individual.m = TRUE,
selection.m.cohorts = "NewOffspring_1_M",
name.cohort = "1yearRams_1",
add.gen=2,
added.genotyped = 1)
population <- breeding.diploid(population, breeding.size = c(0,50),
selection.size = c(0,50),
copy.individual.f = TRUE,
selection.f.cohorts = "NewOffspring_1_F",
name.cohort = "1yearEwes_1",
add.gen=2,
added.genotyped = 1)
population <- breeding.diploid(population, breeding.size = c(10,0), selection.size = c(10,0),
selection.m.cohorts = "1yearRams_0",
copy.individual.m = TRUE,
selection.criteria = "bve",
add.gen=2,
name.cohort = "2yearRams_1")
population <- breeding.diploid(population, breeding.size = c(0,40),
selection.size = c(0,40),
selection.f.cohorts = "1yearEwes_0",
copy.individual.f = TRUE,
selection.criteria = "random",
add.gen=2,
name.cohort = "2yearEwes_1")
population <- breeding.diploid(population, breeding.size = c(0,30),
selection.size = c(0,30),
selection.f.cohorts = "2yearEwes_0",
copy.individual.f = TRUE,
selection.criteria = "random",
add.gen=2,
name.cohort = "3yearEwes_1")
library(MoBPS)
# Use MoBPSmaps when available
if (requireNamespace("MoBPSmaps", quietly = TRUE)) {
map <- MoBPSmaps::map_sheep2
} else{
map <- NULL
}
for(run in 1:10){
for(scenario in 1:4){
# Add additional parameter to the code at all stages that we want to make
# changes to the breeding program.
# The else statement provides the setting in our baseline.
if(scenario==2){
selected_rams <- 5
} else{
selected_rams <- 10
}
if(scenario==3){
share_genotyped_female <- 0.5
} else{
share_genotyped_female <- 1
}
if(scenario==4){
sel_index <- c(3,1)
} else{
sel_index <- c(1,1)
}
set.seed(run)
# Simulation of the LD build up
dataset <- founder.simulation(nindi=100, map = map,
nfinal = 60+120, n.gen = 5)
# Use a genomic map from the MoBPSmap R-package
# Import genomic data from the dataset-matrix ((each individual has 2 haplotypes))
population <- creating.diploid(dataset = dataset[,1:100], nindi = 50, sex.quota=0, map=map,
name.cohort = "1yearRams_0")
# Make sure female founders are only genotyped with a probability of 50%
population <- creating.diploid(dataset = dataset[,101:(100+selected_rams*2)], population = population, nindi = selected_rams,
sex.quota=0, name.cohort = "2yearRams_0")
population <- creating.diploid(dataset = dataset[,121:220], population = population, nindi = 50,
share.genotyped = share_genotyped_female, sex.quota=1, name.cohort = "1yearEwes_0")
population <- creating.diploid(dataset = dataset[,221:300], population = population, nindi = 40,
share.genotyped = share_genotyped_female, sex.quota=1, name.cohort = "2yearEwes_0")
population <- creating.diploid(dataset = dataset[,301:360], population = population, nindi = 30,
share.genotyped = share_genotyped_female, sex.quota=1, name.cohort = "3yearEwes_0")
summary(population)
# Use of two correlated traits
set.seed(run)
population <- creating.trait(population, n.additive = c(1000,1000), mean.target = 100, var.target = c(30,20),
trait.cor = matrix(c(1, 0.2, 0.2,1), nrow=2))
# first column: Size of the litter
# second column: probability of the litter size to occur
litter_size <- matrix(c(2, 0.5,
3, 0.3,
4, 0.2), ncol=2, byrow=TRUE)
for(index in 1:20){
# phenotypes for the second trait are only generated for selected cohorts
population <- breeding.diploid(population, phenotyping.gen = index,
heritability = c(0.3,0.2), n.observation = c(1,0))
population <- breeding.diploid(population, phenotyping.cohorts = paste0(c("2yearRams_", "2yearEwes_", "3yearEwes_"), index-1),
heritability = c(0.3,0.2), n.observation = c(0,1))
# As some individuals are non genotyped a genomic breeding value estimation does not work
# Either use a pedigree-based evaluation or single-step
# Otherwise non-genotyped individuals will automatically be removed for the estimation
population <- breeding.diploid(population, bve = TRUE, bve.gen = index,
bve.cohorts = paste0(c("1yearRams_", "2yearRams_", "1yearEwes_", "2yearEwes_", "3yearEwes_"), index-1))
# Generation of new individuals via reproduction
population <- breeding.diploid(population, breeding.size = c(50,50),
selection.m.cohorts = paste0("2yearRams_", index-1),
selection.f.cohorts = c(paste0("2yearEwes_",index-1), paste0("3yearEwes_",index-1)),
name.cohort = paste0("NewOffspring_",index),
repeat.mating = litter_size,
share.genotyped = 0
)
population <- breeding.diploid(population, breeding.size = c(50,0),
selection.size = c(50,0),
copy.individual.m = TRUE,
selection.m.cohorts = paste0("NewOffspring_",index, "_M"),
name.cohort = paste0("1yearRams_", index),
add.gen=index+1,
added.genotyped = 1
)
population <- breeding.diploid(population, breeding.size = c(0,50),
selection.size = c(0,50),
copy.individual.f = TRUE,
selection.f.cohorts = paste0("NewOffspring_",index, "_F"),
name.cohort = paste0("1yearEwes_", index),
add.gen=index+1,
added.genotyped = share_genotyped_female
)
# Generation of new individuals via selection
population <- breeding.diploid(population, breeding.size = c(selected_rams,0), selection.size = c(selected_rams,0),
selection.m.cohorts = paste0("1yearRams_", index-1),
copy.individual.m = TRUE,
selection.criteria = "bve",
multiple.bve.weights.m = sel_index,
add.gen=index+1,
name.cohort = paste0("2yearRams_", index))
population <- breeding.diploid(population, breeding.size = c(0,40),
selection.size = c(0,40),
selection.f.cohorts = paste0("1yearEwes_", index-1),
copy.individual.f = TRUE,
selection.criteria = "random",
add.gen=index+1,
name.cohort = paste0("2yearEwes_", index))
population <- breeding.diploid(population, breeding.size = c(0,30),
selection.size = c(0,30),
selection.f.cohorts = paste0("2yearEwes_", index-1),
copy.individual.f = TRUE,
selection.criteria = "random",
add.gen=index+1,
name.cohort = paste0("3yearEwes_", index))
}
# Analysis of the outcomes
cohorts <- get.cohorts(population)
genomic_values <- accuracies <- kinships <- matrix(0, nrow=2, ncol=length(cohorts))
for(index in 1:length(cohorts)){
# This extracts the genomic values for animals from the cohort and calculates the mean
genomic_values[,index] <- rowMeans(get.bv(population, cohorts=cohorts[[index]]))
# This extracts accuracies of the breeding value estimation for selected cohorts
accuracies[,index] <- analyze.bv(population, cohorts=cohorts[index])[[1]][1,]
# This approximates avg. kinship between animals and within ((kinship -0.5) *2 is inbreeding)
kinships[,index] <- kinship.emp.fast(population=population, cohorts = cohorts[index])
}
save(file=paste0("Sheep_simulation_scenario", scenario, "run", run,".RData"), list=c("cohorts", "genomic_values", "accuracies", "kinships"))
}
}
warnings()
bvs <- list(numeric(100), numeric(100))
n_run <- 100
for(scenario in 1:2){
for(run in 1:n_run){
load(paste0(paste0("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/MoBPS_Workshop_WIAS/Task11/Sheep_simulation_scenario", scenario, "run", run,".RData")))
bvs[[scenario]][run] <-  genomic_values[1,which(cohorts=="1yearRams_20")]
}
}
# Scenarios 1 & 2 are statistically highly significantly different
# Differnce between the two scenarios is a higher selection intensity. Thus, this should not
# be that surprising.
par(mfrow=c(2,1))
hist(bvs[[1]], xlim=c(110,130), main="Scenario 1", xlab="genomic value")
hist(bvs[[2]], xlim=c(110,130), main="Scenario 2", xlab="genomic value")
t.test(bvs[[1]], bvs[[2]])
BV_avg <- list()
ACC_avg <- list()
n_run <- 100
for(scenario in 1:4){
for(run in 1:n_run){
load(paste0(paste0("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/MoBPS_Workshop_WIAS/Task11/Sheep_simulation_scenario", scenario, "run", run,".RData")))
if(run==1){
BV_avg[[scenario]] <-   genomic_values / n_run
ACC_avg[[scenario]] <-  accuracies /n_run
} else{
BV_avg[[scenario]] <-  BV_avg[[scenario]] + genomic_values/ n_run
ACC_avg[[scenario]] <- ACC_avg[[scenario]] + accuracies/ n_run
}
}
}
what_to_plot <- paste0("1yearRams_", 0:20)
to_plot <- which(cohorts %in% what_to_plot)
# Visualization of the underlying true genomic values of the 1yearRams in the different cycles
par(mfrow=c(1,2))
traitname <- c("Meat", "Fertility")
for(trait in 1:2){
plot(0:20, BV_avg[[1]][trait,to_plot], type="l", main=traitname[trait],xlab="cycle", ylab="genomic value", lwd=2, ylim=c(100,122))
for(sc in 2:4){
lines(0:20, BV_avg[[sc]][trait,to_plot], col=sc, type="l", xlab="cycle", ylab="genomic value", lwd=2)
}
}
legend("topleft", c("Baseline", "Higher selection intensity", "Lower Genotyping share", "Higher weighting on Meat"), lty=1, lwd=2, col=1:4)
# Visualization of the prediction accuracies of the 1yearEwes in the different cycles
what_to_plot <- paste0("1yearEwes_", 0:20)
to_plot <- which(cohorts %in% what_to_plot)
traitname <- c("Meat", "Fertility")
par(mfrow=c(1,2))
for(trait in 1:2){
plot(0:20, ACC_avg[[1]][trait,to_plot], type="l", main=traitname[trait], xlab="cycle", ylab="prediction accuracy", lwd=2, ylim=c(0,1))
for(sc in 2:4){
lines(0:20, ACC_avg[[sc]][trait,to_plot], col=sc, type="l", xlab="cycle", ylab="prediction accuracy", lwd=2)
}
}
legend("topleft", c("Baseline", "Higher selection intensity", "Lower Genotyping share", "Higher weighting on Meat"), lty=1, lwd=2, col=1:4)
mean(ACC_avg[[1]][2,to_plot], na.rm=TRUE)
mean(ACC_avg[[2]][2,to_plot], na.rm=TRUE)
# less genotyping leads to lower accuracies
mean(ACC_avg[[3]][2,to_plot], na.rm=TRUE)
mean(ACC_avg[[4]][2,to_plot], na.rm=TRUE)
mean(ACC_avg[[1]][1,to_plot], na.rm=TRUE)
mean(ACC_avg[[2]][1,to_plot], na.rm=TRUE)
# less genotyping leads to lower accuracies
mean(ACC_avg[[3]][1,to_plot], na.rm=TRUE)
mean(ACC_avg[[4]][1,to_plot], na.rm=TRUE)
devtools::load_all()
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::build()
devtools::build(binary = TRUE)
