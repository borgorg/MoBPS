bve.gen = max(2,(get.ngen(population) - months.bve)) : get.ngen(population)
# Include all individuals that have been in the breeding program in the last 2 years.
### TP: define trait complexes for which you want separate BVEs
## TO-DOs: to checks on restart if current files are a valid input file or if files should be deleted beforehand
new_bve = FALSE ## set to FALSE to benchmark against joint breeding value estimation
if(new_bve){
trait_complex = list(1:2, 3:5)
main_directory = getwd()
for(index in 1:length(trait_complex)){
suppressWarnings(dir.create((paste0("Traitcomplex_", index)))) #  keep the warnings file lean
system(paste0("cp SysDir.inp ", "Traitcomplex_", index, "/SysDir.inp")) ## copy the SysDir file for MiXBLUP
setwd(paste0("Traitcomplex_", index))
population = breeding.diploid(population, bve = TRUE,
bve.gen = bve.gen,
relationship.matrix = relationship.matrix,
mixblup.bve = mixblup.bve,
mixblup.multiple.records = TRUE,
mixblup.numproc = 5, ### TP: I am benchmarking with 5 cores
mixblup.calcinbr.s = TRUE,
mixblup.restart = TRUE,
# mixblup.attach = TRUE, ### TP: This should make generation of genotypes faster // not throughy tested yet.
bve.ignore.traits = (1:length(traits))[-trait_complex[[index]]],
mixblup.path = mixblup.path)
setwd(main_directory) # return to the main directory
}
} else{
population = breeding.diploid(population, bve = TRUE,
bve.gen = bve.gen,
relationship.matrix = relationship.matrix,
mixblup.bve = mixblup.bve,
mixblup.multiple.records = TRUE,
# mixblup.attach = TRUE, ### TP: This should make generation of genotypes faster // not throughy tested yet.
mixblup.numproc = 5, ### TP: I am benchmarking with 5 cores
mixblup.calcinbr.s = TRUE,
mixblup.restart = TRUE,
mixblup.path = mixblup.path) # only SL traits are included in the BVE
}
# Calculate prediction accuracies for different selection stages
accuracies = rbind(accuracies,
as.data.table(cbind(COHORT="PL_piglets",MONTH=month,TRAIT=traits,
ACCURACY=as.vector(analyze.bv(population, cohorts = paste0("PL_piglets_", month-1))[[1]][1,]))),
as.data.table(cbind(COHORT="PL_FT",MONTH=month,TRAIT=traits,
ACCURACY=as.vector(analyze.bv(population, cohorts = paste0("PL_FT_", month-4))[[1]][1,]))),
as.data.table(cbind(COHORT="PL_CT",MONTH=month,TRAIT=traits,
ACCURACY=as.vector(analyze.bv(population, cohorts = paste0("PL_CT_", month-4))[[1]][1,]))),
as.data.table(cbind(COHORT="PL_Elite",MONTH=month,TRAIT=traits,
ACCURACY=as.vector(analyze.bv(population, cohorts = paste0("PL_Elite_", month-1))[[1]][1,]))),
as.data.table(cbind(COHORT="PL_GGP",MONTH=month,TRAIT=traits,
ACCURACY=as.vector(analyze.bv(population, cohorts = paste0("PL_GGP_", month-1))[[1]][1,])))
)
#################################################
###### Generation & selection of animals  #######
#################################################
print(paste("################# Current month:", month, "###################"))
## Farrowing
ggp_alive = sum(get.class(population, cohorts = paste0("PL_GGP_", month - 4))!=(-1))
# Define a litter size
population = breeding.diploid(population,
repeat.mating = cbind(seq((littersize_pl-2),(littersize_pl+2)),
c(0.05,0.15,0.6,0.15,0.05)))
cohorts_sires <- paste0("PL_Elite_", ((1-4):(max(4,month) - 4)))
txt <- paste0("\nCandidate sires: ", nrow(get.database(population, cohorts = cohorts_sires, per.individual = TRUE)),
", originating from cohorts: ",paste(cohorts_sires, collapse=", "))
cat(txt)
cat(txt,file=log_file,append=TRUE)
cohorts_dams <- paste0("PL_GGP_", month - 4)
txt <- paste0("\nCandidate dams: ", nrow(get.database(population, cohorts = cohorts_dams, per.individual = TRUE)),
", originating from cohorts: ",paste(cohorts_dams, collapse=", "))
cat(txt)
cat(txt,file=log_file,append=TRUE)
population = breeding.diploid(population,
breeding.size.litter = ggp_alive,
avoid.mating.fullsib = TRUE,
avoid.mating.halfsib = TRUE,
max.litter = c(Inf, 1),
selection.m.cohorts = cohorts_sires,
selection.f.cohorts = cohorts_dams,
name.cohort = paste0("PL_piglets_", month),
time.point = month,
add.gen = next_gen,
display.progress = print_progress)
ped <- get.pedigree(population, cohorts = paste0("PL_piglets_", month))
cat(paste("\n###### Create piglets for month", month,"#####\n"),file=log_file,append=TRUE)
cat(paste0("Create piglets from ",ggp_alive," GGPs (inseminated 4 months ago) based on average littersize of ", littersize_pl))
cat(paste0("Create piglets from ",ggp_alive," GGPs (inseminated 4 months ago) based on average littersize of ", littersize_pl),
file=log_file,append=TRUE)
txt <- paste0("\nNew male and female piglets born: ", length(get.class(population, cohorts = paste0("PL_piglets_", month,"_M"))),
" + ", length(get.class(population, cohorts = paste0("PL_piglets_", month,"_F"))),
".\nOriginating from ",length(unique(ped[,"father"]))," sires and ",length(unique(ped[,"mother"]))," dams.")
cat(txt)
cat(txt,file=log_file,append=TRUE)
database.all <- get.database(population, cohorts = cohorts_dams, per.individual = TRUE) # get all animals
class.all <- get.class(population, cohorts = cohorts_dams) # check if an individual is in class 0 (still alive)
AGE <- month - get.age.point(population, database = database.all[class.all == 0,]) # check current age of the animals
cat("\n#GGPs per age class\n",file=log_file,append=TRUE)
write.table(as.data.table(table(AGE)), file=log_file,append=TRUE,col.names = T,row.names=F, quote=F, sep="\t")
## Genotyping of starlitter male piglets - others get castrated/culled
population = breeding.diploid(population,
selection.size = c(n_geno_male, 0),
selection.m.cohorts = paste0("PL_piglets_", month -1, "_M"),
genotyped.share = 1,
genotyped.selected = TRUE,
selection.criteria = sel_crit,
selection.index.weights.m = selection_index["line",],
selection.index.scale.m = "unit",
culling.non.selected = TRUE)
## Selection of animals for Central test (age: 2 month)
print("Selection on-test boars central test (CT)")
population = breeding.diploid(population,
selection.size = c(n_ct, 0),
selection.m.cohorts = paste0("PL_piglets_", month -2, "_M"),
copy.individual.m = TRUE,
selection.criteria = sel_crit,
selection.index.weights.m = selection_index["line",],
selection.index.scale.m = "unit",
name.cohort = paste0("PL_CT_", month),
time.point = month,
add.gen = next_gen,
display.progress = print_progress,
culling.non.selected = TRUE)
print(paste("Aiming on", n_ct, "animals, realised",
sum(get.class(population, cohorts = paste0("PL_CT_", month))!=(-1)),"animals"))
## Selection of animals for FT (female) (age: 2 month)
print("Selection on-test gilts")
population = breeding.diploid(population,
selection.size = c(0, n_ft_female),
selection.f.cohorts = paste0("PL_piglets_", month -2, "_F"),
copy.individual.f = TRUE,
selection.criteria = sel_crit,
selection.index.weights.m = selection_index["line",],
selection.index.scale.m = "unit",
name.cohort = paste0("PL_FT_", month),
time.point = month,
add.gen = next_gen,
display.progress = print_progress,
culling.non.selected = TRUE)
## Genotype top rearing gilts (directly after entering rearing)
population = breeding.diploid(population,
selection.size = c(n_geno_female, 0),
selection.m.cohorts = paste0("PL_FT_", month),
genotyped.selected = TRUE,
genotyped.share = 1,
selection.criteria = sel_crit,
selection.index.weights.m = selection_index["line",],
selection.index.scale.m = "unit")
## Rearing (Elite) (age: 6 month)
print("Selection after rearing boars central test (CT)")
population = breeding.diploid(population,
selection.size = c(n_ct_sel,0),
selection.m.cohorts = paste0("PL_CT_", month-4),
copy.individual.m = TRUE,
selection.criteria = sel_crit,
selection.index.weights.m = selection_index["line",],
selection.index.scale.m = "unit",
name.cohort = paste0("PL_ACT_", month),
time.point = month,
add.gen = next_gen,
display.progress = print_progress,
culling.non.selected = TRUE)
## Rearing (Female) (age: 6 month)
print("Selection after rearing gilts")
population = breeding.diploid(population,
selection.size = c(0,n_ft_sel_female),
selection.f.cohorts = paste0("PL_FT_", month-4),
copy.individual.f = TRUE,
selection.criteria = sel_crit,
selection.index.weights.m = selection_index["line",],
selection.index.scale.m = "unit",
name.cohort = paste0("PL_AFT_", month),
time.point = month,
add.gen = next_gen,
display.progress = print_progress,
culling.non.selected = TRUE)
## Introduction of reared animal into breeding population
print("Selection Elite sires")
cohorts <- paste0("PL_ACT_", month - 3)
print(paste0("Candidates: ", nrow(get.database(population, cohorts = cohorts, per.individual = TRUE)),
", originating from cohorts: ",paste(cohorts, collapse=", ")))
population = breeding.diploid(population,
selection.size = c(n_elite, 0),
max.selection.fullsib = 1,    # Avoid full-sibs being selected (by definition FS are within same cohort)
max.selection.halfsib = ceiling(n_elite/3), # Force selection from multiple halfsib families (within a cohort)
selection.m.cohorts = cohorts,
copy.individual.m = TRUE,
selection.criteria = sel_crit,
selection.index.weights.m = selection_index["line",],
selection.index.scale.m = "unit",
name.cohort = paste0("PL_Elite_", month),
time.point = month,
add.gen = next_gen,
display.progress = print_progress)
save.image(file = "tmp.RData")
get.pedigree(population, cohorts = cohorts)
get.class(population, cohorts = cohorts)
get.id(population, cohorts = cohorts)
print(paste("Aiming on", n_elite, "animals, realised",
sum(get.class(population, cohorts = paste0("PL_Elite_", month))!=(-1)),"animals"))
print("Selection Terminal sires")
candidates = group.diff(population, cohorts = paste0("PL_ACT_", month - 3),
remove.cohorts = paste0("PL_Elite_", 0:month))   # Just exclude them all to be sure
print(paste("Aiming on", n_terminal, "animals, available", get.nindi(population, database = candidates)))
population = breeding.diploid(population,
selection.size = c(n_terminal, 0),
selection.m.database = candidates,
copy.individual.m = TRUE,
selection.criteria =sel_crit,
selection.index.weights.m = selection_index["line",],
selection.index.scale.m = "unit",
name.cohort = paste0("PL_Terminal_", month),
time.point = month,
add.gen = next_gen,
display.progress = print_progress,
culling.non.selected = TRUE)
## Selection Insemination candidate (age: 8 month / 13 / 18 etc.)
print("Selection insem candidates")
population = breeding.diploid(population,
selection.size = c(0,n_ggp),
selection.f.cohorts = c(paste0("PL_AFT_", month - 3),
paste0("PL_GGP_", month - 5)),
copy.individual.f = TRUE,
selection.criteria = sel_crit,
selection.index.weights.m = selection_index["line",],
selection.index.scale.m = "unit",
name.cohort = paste0("PL_GGP_", month),
time.point = month,
add.gen = next_gen,
display.progress = print_progress,
culling.non.selected = TRUE)
## L x Z cross (F1-dams)
# Get sires for CCPS program
database.sires <- get.database(population, cohorts = c(paste0("PL_Elite_",-4:(month-5)),paste0("PL_Terminal_",-4:(month-5))), per.individual = TRUE)
population = breeding.diploid(population,
breeding.size = c(0, n_zl),
selection.f.cohorts = paste0("DL1_founder_M"),
max.litter = c(Inf, 1),
selection.m.database = database.sires,
name.cohort = paste0("F1-cross_", month),
add.gen = next_gen + 1,
time.point = month,
display.progress = print_progress)
print(paste("New F1 sows born:", length(get.class(population, cohorts = paste0("F1-cross_", month)))))
ped <- get.pedigree(population, cohorts = paste0("F1-cross_", month))
print(paste("Originating from",length(unique(ped[,"father"])),"sires and",length(unique(ped[,"mother"])),"dams."))
#################################################
#################### Culling  ###################
#################################################
print("Culling of animals based on culling probabilities")
# this is not modelled to be genetically (see Tobias implementation for this)
for(cycle in max(0, (month - nrow(culling_prob))):(month-1)){
age = month - cycle
population = breeding.diploid(population, culling.share1 = culling_prob[age , 1],
culling.cohorts = paste0("PL_piglets_", month - age, "_M"))
population = breeding.diploid(population, culling.share1 = culling_prob[age , 2],
culling.cohorts = paste0("PL_piglets_", month - age, "_F"))
}
print("Culling of animals from founder populations")
for(cohort_type in needed_cohorts[,1]){
for(index in (-4):0){
activ_cohort = paste0(cohort_type,  index)
current_age = month - get.age.point(population, cohorts = activ_cohort)[1]
if(current_age < 39){
population = breeding.diploid(population, culling.cohorts = activ_cohort,
culling.share1 = culling_prob[current_age , 2])
}
}
}
# Remove F1 animals
# F1 Can be culled after phenotyping
cohorts <- get.cohorts(population)[get.cohorts(population) %in% paste0("F1-cross_",-5:(month - 30))]
if (length(cohorts)>0) population = breeding.diploid(population, culling.share1 = 1,
culling.cohorts = cohorts)
# To do: Cull worst Elite and Terminal sires based on AI capacity (n_ai_elite, n_ai_terminal)???
# At the moment they get automatically culled after few months on AI
##### Standardise traits to desired means and variances after burn-in period (min_months) #####
if (month == min_months - 1) {
pl_traits_seq <- which(traits %in% pl_traits)
trait_mean = VAR_MOBPS$MEAN # trait mean
trait_var = VAR_MOBPS$VARP * VAR_MOBPS$H2 # trait genetic variance
population = bv.standardization(population,
traits = pl_traits_seq ,
var.target = trait_var[pl_traits_seq],
cohorts = paste0("PL_piglets_",month))
}
##### Logging of runtime
print(paste0('Runtime: ', format.timediff(start_time), ', (month ',month,': ', format.timediff(start_time_loop),')'))
cat(paste('\nRuntime: ', format.timediff(start_time), ', (month ',month,': ', format.timediff(start_time_loop),')\n')
,file=log_file,append=TRUE)
}
getwd()
mixblup.path.pedfile
mixblup.path.pedfile = "test.txt"
bve.database
bve.gen
bve.database = get.database(population ,gen = 2:6)
verbose
storage.save
depth.pedigree
mixblup.reliability
write.pedigree(population, path = mixblup.path.pedfile, database = bve.database,
depth.pedigree=depth.pedigree, storage.save = storage.save, verbose=verbose,
mixblup.reliability = mixblup.reliability,
include.error = FALSE)
if(verbose) cat(paste0("Start writting pedigree file at ", path,"\n"))
database = get.database(population, gen = gen, database = database, cohorts = cohorts, id = id)
id
id = NULL
if(verbose) cat(paste0("Start writting pedigree file at ", path,"\n"))
database = get.database(population, gen = gen, database = database, cohorts = cohorts, id = id)
database
database
population$info$size
get.database(population, gen = 2:3)
get.database(population, gen = 2:4)
get.database(population, gen = 2:6)
gen
database = get.database(population, gen = gen, database = database, cohorts = cohorts, id = id)
database
database
database = get.database(population, gen = 2:6)
database
get.database(population, gen = gen, database = database, cohorts = cohorts, id = id)
database
database = get.database(population, gen = gen, database = database, cohorts = cohorts, id = id)
if(verbose) cat(paste0("Start collecting pedigree\n"))
# Generate data needed for the ped-file (see kinship.exp())
if(depth.pedigree==Inf){
pedigree.database <- get.database(population, gen=1:max(database[,1]))
} else{
new.pedigree.database <- pedigree.database <- database
remaining.depth <- depth.pedigree
while(remaining.depth>0){
parents <- get.pedigree(population, database = new.pedigree.database, raw=TRUE, include.error = include.error)
m_parents <- rbind(parents[parents[,5]==1,4:6], parents[parents[,8]==1,7:9])
f_parents <- rbind(parents[parents[,5]==2,4:6], parents[parents[,8]==2,7:9])
if(nrow(m_parents)>0){
m_gen <- unique(m_parents[,1])
m_data <- cbind(m_gen, 1, 0,0)
nincluded <- numeric(length(m_gen))
for(index in 1:length(m_gen)){
m_data[index,3] <- min(m_parents[m_parents[,1]==m_gen[index],3])
m_data[index,4] <- max(m_parents[m_parents[,1]==m_gen[index],3])
nincluded[index] <- length(unique(m_parents[m_parents[,1]==m_gen[index],3]))
}
for(index in length(m_gen):1){
if(nincluded[index] < (m_data[index,4]-m_data[index,3]+1)/storage.save){
m_data <- m_data[-index,]
activ_p <- unique(m_parents[m_parents[,1]==m_gen[index],3])
m_data <- rbind(m_data, cbind(m_gen[index], 1, activ_p, activ_p))
}
}
} else{
m_data <- NULL
}
if(nrow(f_parents)>0){
f_gen <- unique(f_parents[,1])
f_data <- cbind(f_gen, 2, 0,0)
nincluded <- numeric(length(f_gen))
for(index in 1:length(f_gen)){
f_data[index,3] <- min(f_parents[f_parents[,1]==f_gen[index],3])
f_data[index,4] <- max(f_parents[f_parents[,1]==f_gen[index],3])
nincluded[index] <- length(unique(f_parents[f_parents[,1]==f_gen[index],3]))
}
for(index in length(f_gen):1){
if(nincluded[index] < (f_data[index,4]-f_data[index,3]+1)/storage.save){
f_data <- f_data[-index,]
activ_p <- unique(f_parents[f_parents[,1]==f_gen[index],3])
f_data <- rbind(f_data, cbind(f_gen[index], 2, activ_p, activ_p))
}
}
} else{
f_data <- NULL
}
new.pedigree.database <- get.database(population, database=rbind(m_data,f_data))
new.pedigree.database <- unique(new.pedigree.database)
remaining.depth <- remaining.depth - 1
pedigree.database <- rbind(new.pedigree.database, pedigree.database)
}
pedigree.database <- get.database(population, database = pedigree.database)
}
pedigree.database
include.error
pedigree_table <- get.pedigree(population, database = pedigree.database, id=TRUE, include.error = include.error)
pedigree_table
population$breeding[[1]][[48]]
population$breeding[[1]][[48]][1:10,]
population$breeding[[1]][[48]][1:10,1:10]
population$breeding[[1]][[48]][,1:10]
population$breeding[[1]][[47]][,1:10]
population$breeding[[1]][[48]][,1:10]
population$breeding[[1]][[15]]
population$breeding[[1]][[16]]
pedigree_table <- get.pedigree(population, database = pedigree.database, id=TRUE, include.error = include.error)
pedigree_table
which(rowMeans(pedigree_table==0) ==1)
pedigree_table[501,]
pedigree.database
get.pedigree(population, database = cbind(2,1,1))
get.pedigree(population, database = cbind(2,1,1:2))
get.pedigree(population, database = cbind(2,1,1:2), id = TRUE)
population$breeding[[2]][[47]][,1:5]
population$breeding[[1]][[47]][,1:5]
population$breeding[[1]][[48]][,1:5]
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
###################################################################
#### Topigs new shorten script for population initialization   ####
###################################################################
module load intel/oneapi/mkl intel/oneapi/compiler gcc/11.2.0 cuda/11.6.2.124
### TP: this is when I am working on windows for debugging
setwd("C:/Users/pook001/Downloads/rstudio-export (1)/")
load("mobps_settings.Rda")
### TP: pop_file is not initialized
pop_file = "topigs_test.RData"
log_file = "topigs_test.log"
result_file_population = "topigs_result.RData"
nr = 1
work_dir = "/home/WUR/pook001/lustre/tn_test"
setwd(work_dir)
load("mobps_settings.Rda")
mixblup.path = "/cm/shared/apps/mixblup/current/MiXBLUP.exe"
system(paste0("cp /home/WUR/pook001/SysDir.inp ", work_dir, "/SysDir.inp"))
#system("/cm/shared/apps/mixblup/current/MiXBLUP.exe MiXBLUP_files/InpMiXBLUP.txt")
source("11_hpc_utils.R")
if(Sys.info()[['sysname']]=="Windows"){
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
mixblup.path = "MiXBLUP/MiXBLUP.exe"
lines_per_pop = 500
n_ggp = 10
n_ft_female = 100
}
print_progress <- FALSE # Set FALSE to not display progress bars when generating individuals
set.seed(nr)
# Initialize general parameters for simulation
pools = c("PL","DL1")
# Get trait information
n_traits = length(traits)
# read in the target correlation matrix
gen_cor_matrix = copy(RG_MOBPS)
res_cor_matrix = diag(n_traits)
## read in trait parameters
heritability = VAR_MOBPS$H2 # trait heritability
repeatability = VAR_MOBPS$H2 + VAR_MOBPS$PE2 # trait repeatability
trait_mean = VAR_MOBPS$MEAN # trait mean
trait_var = VAR_MOBPS$VARP * VAR_MOBPS$H2 # trait genetic variance
if(use_vcf){
# Importing phased genotypes from VCF file
# This needs to be phased
# IF this is not phased have unphased VCF and apply BEAGLE (http://faculty.washington.edu/browning/beagle/beagle.html#download)
# Code example for use of beagle below (replace capital letter input with real paths)
# java -jar BEAGLE.jar gt=UNPHASED.vcf out=PHASED ne=1000 nthreads=1
vcf_SL = paste0(geno.path,"/",paste0(strrep(line_of_interest, 4)),".phased.vcf.gz")
vcf_DL1 = paste0(geno.path,"/",paste0(strrep(damline_1, 4)),".phased.vcf.gz")
for(index in 1:length(pools)){
population = creating.diploid(vcf = get(paste0("vcf_",pools[index])),
class = index, name.cohort = paste0(pools[index], "_founder"),
vcf.maxindi = lines_per_pop, # this line is for testing with a small dataset
#use.recalculate.manual = TRUE,
founder.pool = index)
}
} else{
population = NULL
for(index in 1:length(pools)){
population = creating.diploid(population = population,
nsnp = n_snps,
chr.nr = if(index ==1){ 5 } else{NULL},
nindi = lines_per_pop,
class = index, name.cohort = paste0(pools[index], "_founder"),
vcf.maxindi = lines_per_pop, # this line is for testing with a small dataset
use.recalculate.manual = TRUE,
founder.pool = index
)
}
}
### TP: use multipe cores to simulate meiosis
population = breeding.diploid(population, generation.cores = 5)
## SL:
# add a column with the age of animals
# avoid that selected cohorts contain groups of 10 full sibs
# not generate cohorts that are never needed
needed_cohorts = matrix( c("PL_piglets_", round((n_ggp * littersize_pl)/2), round((n_ggp * littersize_pl)/2), 0,10,
"PL_CT_",      n_ct,        0, 2,2,
"PL_FT_",      0,   n_ft_female, 2,2,
"PL_ACT_",  n_ct_sel,    0, 6,2,
"PL_AFT_",  0,    n_ft_sel_female,6,2,
"PL_Elite_",   n_elite,     0, 9,1,
"PL_GGP_",     0,           n_ggp,9,1,
"PL_Terminal_",n_terminal,  0,9,1), byrow= TRUE, ncol = 5)
for(cycle in (-4):0){
for(index in 1:nrow(needed_cohorts)){
population = breeding.diploid(population, breeding.size = as.numeric(needed_cohorts[index,2:3]),
selection.m.cohorts = "PL_founder_M",
selection.f.cohorts = "PL_founder_F",
repeat.mating = min(littersize_pl, as.numeric(needed_cohorts[index,5])),
name.cohort = paste0(needed_cohorts[index], cycle),
add.gen = cycle + 6, #cycle -4 should match with generation 2 (founders are generation 1)
#use.recalculate.manual = TRUE,  # TODO: gives error message
time.point = cycle,
age.point = cycle - as.numeric(needed_cohorts[index,4]),
display.progress = print_progress)
}
}
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::build()
3755/5
load("C:/Users/pook001/OneDrive - Wageningen University & Research/infra_data.RData")
load("C:/Users/pook001/OneDrive - Wageningen University & Research/old_files/infra_data.RData")
dim(data)
dim(infra)
head(infra)
infra[1:10,1:10]
data[1:10,1:10]
a
