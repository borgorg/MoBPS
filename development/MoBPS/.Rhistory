for(index in 1:3){
# plot fuer scenario 1
plot(0,0, type = "l", ylab = "genetic gain", xlab = "generation",
main = trait_name[index], lwd=2,
ylim = ylim[[index]],
xlim = c(1,20))
#       ylim = trait_mean[index] + c(-4*trait_sd[index],4*trait_sd[index]))
# welche plots in die grafik sonst noch sollen
for(sc in scenarios){
lines((genomic_values_avg[[sc]][index,boecke] ), col = colors[sc], lwd=2)
}
if(index ==1){
abline(h = 23, lty = 2)
} else{
abline(h = 100, lty = 2)
}
if(index ==2) {
legend("topleft",
sc_names[scenarios],
col = colors[scenarios], lwd = 2, lty =1, cex =1.2 )
}
}
colors = c(0,0,1,4,2,0,7,3,4,5,6,7,8)
for(index in 1:3){
# plot fuer scenario 1
plot(0,0, type = "l", ylab = "genetic gain", xlab = "generation",
main = trait_name[index], lwd=2,
ylim = ylim[[index]],
xlim = c(1,20))
#       ylim = trait_mean[index] + c(-4*trait_sd[index],4*trait_sd[index]))
# welche plots in die grafik sonst noch sollen
for(sc in scenarios){
lines((genomic_values_avg[[sc]][index,boecke] ), col = colors[sc], lwd=2)
}
if(index ==1){
abline(h = 23, lty = 2)
} else{
abline(h = 100, lty = 2)
}
if(index ==2) {
legend("topleft",
sc_names[scenarios],
col = colors[scenarios], lwd = 2, lty =1, cex =1.2 )
}
}
{
png(filename = "Figure1.png", width = 700, height = 2000, res = 200)
# drei grafiken in eins
par(mfrow = c(3,1))
# kleinere seitenraender
par(mar = c(4,4,2,0.1))
# waehle y-achsen abschnitt manuell
ylim = list(c(7,26.5), c(95,160), c(45,190))
# welche scenarios in die grafik sollen
scenarios = c(3,4,5)
sc_names = c( "Pheno_alt",
"Tail+",
"Conv 0,0.5,0.5",
"Tail -1,0,0",
"Balance -0.33,0.33,0.33",
"Balance_Pheno",
"Conv (accidently simulated twice)",
"Tail+ -0.5,0.1,0.4",
"Tail+ -0.4,0.1,0.5",
"Tail+ -0.5,0.0,0.5",
"Tail+ -0.6,0.0,0.4",
"Tail+ -0.6,0.0,0.4 (+1000)",
"Tail+ -0.6,0.0,0.4 (+12000)")
colors = c(0,0,1,4,2,0,7,3,4,5,6,7,8)
for(index in 1:3){
# plot fuer scenario 1
plot(0,0, type = "l", ylab = "genetic gain", xlab = "generation",
main = trait_name[index], lwd=2,
ylim = ylim[[index]],
xlim = c(1,20))
#       ylim = trait_mean[index] + c(-4*trait_sd[index],4*trait_sd[index]))
# welche plots in die grafik sonst noch sollen
for(sc in scenarios){
lines((genomic_values_avg[[sc]][index,boecke] ), col = colors[sc], lwd=2)
}
if(index ==1){
abline(h = 23, lty = 2)
} else{
abline(h = 100, lty = 2)
}
if(index ==2) {
legend("topleft",
sc_names[scenarios],
col = colors[scenarios], lwd = 2, lty =1, cex =1.2 )
}
}
dev.off()
}
getwd()
{
png(filename = "Figure1.png", width = 1000, height = 2000, res = 300)
# drei grafiken in eins
par(mfrow = c(3,1))
# kleinere seitenraender
par(mar = c(4,4,2,0.1))
# waehle y-achsen abschnitt manuell
ylim = list(c(7,26.5), c(95,160), c(45,190))
# welche scenarios in die grafik sollen
scenarios = c(3,4,5)
sc_names = c( "Pheno_alt",
"Tail+",
"Conv 0,0.5,0.5",
"Tail -1,0,0",
"Balance -0.33,0.33,0.33",
"Balance_Pheno",
"Conv (accidently simulated twice)",
"Tail+ -0.5,0.1,0.4",
"Tail+ -0.4,0.1,0.5",
"Tail+ -0.5,0.0,0.5",
"Tail+ -0.6,0.0,0.4",
"Tail+ -0.6,0.0,0.4 (+1000)",
"Tail+ -0.6,0.0,0.4 (+12000)")
colors = c(0,0,1,4,2,0,7,3,4,5,6,7,8)
for(index in 1:3){
# plot fuer scenario 1
plot(0,0, type = "l", ylab = "Phaenotyp", xlab = "Jahr",
main = trait_name[index], lwd=2,
ylim = ylim[[index]],
xlim = c(1,20))
#       ylim = trait_mean[index] + c(-4*trait_sd[index],4*trait_sd[index]))
# welche plots in die grafik sonst noch sollen
for(sc in scenarios){
lines((genomic_values_avg[[sc]][index,boecke] ), col = colors[sc], lwd=2)
}
if(index ==1){
abline(h = 23, lty = 2)
} else{
abline(h = 100, lty = 2)
}
if(index ==2) {
legend("topleft",
sc_names[scenarios],
col = colors[scenarios], lwd = 2, lty =1, cex =1.2 )
}
}
dev.off()
}
{
png(filename = "Figure1.png", width = 1500, height = 3000, res = 300)
# drei grafiken in eins
par(mfrow = c(3,1))
# kleinere seitenraender
par(mar = c(4,4,2,0.1))
# waehle y-achsen abschnitt manuell
ylim = list(c(7,26.5), c(95,160), c(45,190))
# welche scenarios in die grafik sollen
scenarios = c(3,4,5)
sc_names = c( "Pheno_alt",
"Tail+",
"Conv 0,0.5,0.5",
"Tail -1,0,0",
"Balance -0.33,0.33,0.33",
"Balance_Pheno",
"Conv (accidently simulated twice)",
"Tail+ -0.5,0.1,0.4",
"Tail+ -0.4,0.1,0.5",
"Tail+ -0.5,0.0,0.5",
"Tail+ -0.6,0.0,0.4",
"Tail+ -0.6,0.0,0.4 (+1000)",
"Tail+ -0.6,0.0,0.4 (+12000)")
colors = c(0,0,1,4,2,0,7,3,4,5,6,7,8)
for(index in 1:3){
# plot fuer scenario 1
plot(0,0, type = "l", ylab = "Phaenotyp", xlab = "Jahr",
main = trait_name[index], lwd=2,
ylim = ylim[[index]],
xlim = c(1,20))
#       ylim = trait_mean[index] + c(-4*trait_sd[index],4*trait_sd[index]))
# welche plots in die grafik sonst noch sollen
for(sc in scenarios){
lines((genomic_values_avg[[sc]][index,boecke] ), col = colors[sc], lwd=2)
}
if(index ==1){
abline(h = 23, lty = 2)
} else{
abline(h = 100, lty = 2)
}
if(index ==2) {
legend("topleft",
sc_names[scenarios],
col = colors[scenarios], lwd = 2, lty =1, cex =1.2 )
}
}
dev.off()
}
infra = NULL
inf_date = NULL
for(index in (1:1585)){
#for(index in 2){
tryCatch(  {
load(paste0("est_fatty_",index,".RData"))
print(index)
storage.mode(infra_table) = "integer"
infra = rbind(infra,infra_table)
inf_date = rbind(inf_date,infra_stats)
},
error = function(e) {})
}
warnings()
weather = read.table("C:/Users/pook001/OneDrive - Wageningen University & Research/data_ines/weatherfeatures_30.txt", sep = ",", header = TRUE)
infra = NULL
inf_date = NULL
weather = read.table("C:/Users/pook001/OneDrive - Wageningen University & Research/data_ines/weatherfeatures_30.txt", sep = ",", header = TRUE)
milk = NULL
#for(index in (1:100)[-c(1,11,20,23,36,45,55,59,73,75,96)]){
for(index in 2){
load(paste0("ams_",index,"_clean.RData"))
print(index)
milk = rbind(milk,ams_clean)
}
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/data_re/")
weather = read.table("C:/Users/pook001/OneDrive - Wageningen University & Research/data_ines/weatherfeatures_30.txt", sep = ",", header = TRUE)
milk = NULL
#for(index in (1:100)[-c(1,11,20,23,36,45,55,59,73,75,96)]){
for(index in 2){
load(paste0("ams_",index,"_clean.RData"))
print(index)
milk = rbind(milk,ams_clean)
}
infra = NULL
inf_date = NULL
for(index in (1:1585)){
#for(index in 2){
tryCatch(  {
load(paste0("est_fatty_",index,".RData"))
print(index)
storage.mode(infra_table) = "integer"
infra = rbind(infra,infra_table)
inf_date = rbind(inf_date,infra_stats)
},
error = function(e) {})
}
save(file="est_fatty_full.RData", list = c("infra", "inf_date"))
# differences between lactations
par(mfrow = c(1,3))
uv = 2013:2021
for(lac in 1:3){
for(act in 10){
ll = NULL
tt = NULL
for(year1 in uv){
keep = (inf_date[,8]==year1) & infra[,26]==0 & inf_date[,2] == lac
stress = ksmooth(inf_date[keep,10],infra[keep,act],
bandwidth = 0.001,
x.points = 1:365)
stress2 = ksmooth(inf_date[keep,10],infra[keep,act],
bandwidth = 5,
x.points = 1:365)
values = weather[weather[,17]==year1,10][1:365]
ll = c(ll, stress2$y[!is.na(values)])
tt = c(tt, values[!is.na(values)])
}
plot(tt,ll, xlab = "THI", ylab = "P%", ylim = c(2.9, 3.6))
smooth = ksmooth(tt[!is.na(ll)],ll[!is.na(ll)], bandwidth = 3,
x.points = seq(20,90,by =0.1))
lines(ksmooth(tt[!is.na(ll)],ll[!is.na(ll)], bandwidth = 3), col = "red", lwd = 2)
b = (smooth$y[which(smooth$x ==70)] - smooth$y[which(smooth$x ==60)])/10
abline(v = 60)
abline(v = 70)
text(61,3.5, round(b, digits = 4))
}
}
# differences between time in lactation
par(mfrow = c(1,6))
uv = 2013:2021
for(lac in list(11:50, 51:150,151:250,251:350, 351:450, 451:550)){
for(act in 10){
ll = NULL
tt = NULL
for(year1 in uv){
keep = (inf_date[,8]==year1) & infra[,26]==0 & inf_date[,1] %in% lac
stress = ksmooth(inf_date[keep,10],infra[keep,act],
bandwidth = 0.001,
x.points = 1:365)
stress2 = ksmooth(inf_date[keep,10],infra[keep,act],
bandwidth = 5,
x.points = 1:365)
values = weather[weather[,17]==year1,10][1:365]
ll = c(ll, stress2$y[!is.na(values)])
tt = c(tt, values[!is.na(values)])
}
plot(tt,ll, xlab = "THI", ylab = "P%", ylim = c(2.5, 4.0))
smooth = ksmooth(tt[!is.na(ll)],ll[!is.na(ll)], bandwidth = 3,
x.points = seq(20,90,by =0.1))
lines(ksmooth(tt[!is.na(ll)],ll[!is.na(ll)], bandwidth = 3), col = "red", lwd = 2)
b = (smooth$y[which(smooth$x ==70)] - smooth$y[which(smooth$x ==60)])/10
abline(v = 60)
abline(v = 70)
print( round(b, digits = 4))
text(61,3.5, round(b, digits = 4), col = "red")
}
}
par(mfrow = c(1,1))
uv = 2013:2021
for(act in 10){
ll = NULL
tt = NULL
for(year1 in uv){
keep = (inf_date[,8]==year1) & infra[,26]==0
stress = ksmooth(inf_date[keep,10],infra[keep,act],
bandwidth = 0.001,
x.points = 1:365)
stress2 = ksmooth(inf_date[keep,10],infra[keep,act],
bandwidth = 5,
x.points = 1:365)
values = weather[weather[,17]==year1,10][1:365]
ll = c(ll, stress2$y[!is.na(values)])
tt = c(tt, values[!is.na(values)])
}
plot(tt,ll, xlab = "THI", ylab = "P%", ylim = c(2.5, 4.0))
smooth = ksmooth(tt[!is.na(ll)],ll[!is.na(ll)], bandwidth = 3,
x.points = seq(20,90,by =0.1))
lines(ksmooth(tt[!is.na(ll)],ll[!is.na(ll)], bandwidth = 3), col = "red", lwd = 2)
b = (smooth$y[which(smooth$x ==70)] - smooth$y[which(smooth$x ==60)])/10
abline(v = 60)
abline(v = 70)
print( round(b, digits = 4))
text(61,3.5, round(b, digits = 4), col = "red")
}
# differences between time in lactation
par(mfrow = c(1,6))
uv = 2013:2021
for(lac in list(11:50, 51:150,151:250,251:350, 351:450, 451:550)){
for(act in 10){
ll = NULL
tt = NULL
for(year1 in uv){
keep = (inf_date[,8]==year1) & infra[,26]==0 & inf_date[,1] %in% lac
stress = ksmooth(inf_date[keep,10],infra[keep,act],
bandwidth = 0.001,
x.points = 1:365)
stress2 = ksmooth(inf_date[keep,10],infra[keep,act],
bandwidth = 5,
x.points = 1:365)
values = weather[weather[,17]==year1,10][1:365]
ll = c(ll, stress2$y[!is.na(values)])
tt = c(tt, values[!is.na(values)])
}
plot(tt,ll, xlab = "THI", ylab = "P%", ylim = c(2.5, 4.0))
smooth = ksmooth(tt[!is.na(ll)],ll[!is.na(ll)], bandwidth = 3,
x.points = seq(20,90,by =0.1))
lines(ksmooth(tt[!is.na(ll)],ll[!is.na(ll)], bandwidth = 3), col = "red", lwd = 2)
b = (smooth$y[which(smooth$x ==70)] - smooth$y[which(smooth$x ==60)])/10
abline(v = 60)
abline(v = 70)
print( round(b, digits = 4))
text(61,3.5, round(b, digits = 4), col = "red")
}
}
text(61,3.5, round(b, digits = 4), cex =1.5, col = "red")
text(61,2.6, round(b, digits = 4), cex =1.5, col = "red")
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
n = 500
nsc = 86
bv_total = bv_sd_total = inb_total= share_fixed_total = share_fixed_qtl_total =
share_fixed_good_total = share_fixed_bad_total = matrix(0, nrow=nsc, ncol=111)
load("total_v3.RData")
legend =     c("EBV", "BV", "Pheno", "min(5,p^(-1/2))", "p^(-1/2)", "p^-1", "p^(-1/3)","(1-p)", "(1-p)^2",
"FAILED", "kinship to top individuals_0.05",  "inbreeding (pedigree)_0.05", "inbreeding (genetic)_0.05",
"FAILED", "kinship to top individuals_0.2", "inbreeding (pedigree)_0.2", "inbreeding (genetic)_0.2",
"Number of rare benefical_0.05", "Number of rare_0.05", "Number of rare benefical_0.2", "Number of rare_0.2",  "p^(-1/2)_limit", "p^(-1/2)", "p^-1", "p^(-1/3)","(1-p)",
"(1-p)^2", "random_error_0.05", "random_error_0.2", "Index5",
"Number of rare strongly ben_0.05", "Number of rare strongly ben_0.2",
"p^(-1/3) & kinship to top individuals_0.2",
"kinship to top individuals_0.2 & Index5",
"p^(-1/3) & kinship to top individuals_0.2 & Index5",
"kinship to population_0.05",
"kinship to population_0.2"
)
legend[53:62] = paste0("kinship to top individuals_", c(0.025,0.075,0.1,0.125,0.15,0.175,0.25,0.3,0.4,0.5))
used_color = NULL
include = c(1,57,66,67,68,69)
used_color[include] = 1:8
limits = c(-0.2,1.5)
par(mfrow=c(1,4))
limits = c(-0.1,1)
plot(0,0, xlim=c(0,50), ylim=limits, main = "genetic gain", ylab = "genetic gain in gSD", xlab="generation")
for(index in include){
#  lines(0:50, bv_total[index,11:61] - bv_total[1,11:61], col=used_color[index], lwd=2)
lines(0:50, bv_total[index,c(11,62:111)] - bv_total[1,c(11,62:111)], lty = 1, col=used_color[index], lwd=2)
}
index = include[1]
legend("topleft", legend[include],
col=used_color[include], lty = 1, lwd=2, cex = 0.7)
plot(-10000,0, xlim=c(0,50), ylim=c(0,1), main = "inbreeding", ylab = "inbreeding level", xlab="generation")
for(index in include){
lines(0:50, inb_total[index,11:61], col=used_color[index], lwd=2)
}
index = include[1]
lines(0:50, inb_total[index,11:61], col=used_color[index], lwd=2, lty = 3)
plot(-10000,0, xlim=c(0,50), ylim=c(0,1), main = "genetic variance", ylab = "genetic variance", xlab="generation")
for(index in include){
lines(0:50, bv_sd_total[index,11:61], col=used_color[index], lwd=2)
}
index = include[1]
lines(0:50, bv_sd_total[index,11:61], col=used_color[index], lwd=2, lty = 3)
plot(-10000,0, xlim=c(0,50), ylim=c(0,1), main = "Fixed QTLs", ylab = "share", xlab="generation")
for(index in include){
lines(0:50, share_fixed_qtl_total[index,11:61], col=used_color[index], lwd=2)
}
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
dim(MoBPSmaps::map_wheat1)
dim(MoBPSmaps::map_wheat2)
population = creating.diploid(map = MoBPSmaps::map_wheat2,
nindi = 100)
MoBPSmaps::map_wheat2
MoBPSmaps::map_wheat1
map = MoBPSmaps::map_wheat2
map[,3] = NA
population = creating.diploid(map = map,
nindi = 100)
map
population = creating.diploid(chr.nr = 21, chromosome.length = 1, nsnp = 2100,
nindi = 100)
get.vcf(file = "example.vcf", gen = 1, use.id = TRUE)
get.vcf(path = "example.vcf", gen = 1, use.id = TRUE)
get.vcf(population, path = "example.vcf", gen = 1, use.id = TRUE)
meta_data = cbind(get.id(population, gen =1), sample(c("M", "F"), 100, replace = TRUE))
meta_data
cbind( c("P0", "P1", "P2"),
c("P0", "P1", NA),
c("P0", NA, NA),
c("P2", NA, NA),
c("P1", "P2", NA),
c("P1", NA, NA),
c(NA, "P0", NA),
c(NA, "P0", "P1"),
c(NA, NA, "P0"))
sample(10, 100)
sample(10, 100, replace = TRUE)
rbind( c("P0", "P1", "P2"),
c("P0", "P1", NA),
c("P0", NA, NA),
c("P2", NA, NA),
c("P1", "P2", NA),
c("P1", NA, NA),
c(NA, "P0", NA),
c(NA, "P0", "P1"),
c(NA, NA, "P0"))
cbind( c("P0", "P1", "P2"),
c("P0", "P1", NA),
c("P0", NA, NA),
c("P2", NA, NA),
c("P1", "P2", NA),
c("P1", NA, NA),
c(NA, "P0", NA),
c(NA, "P0", "P1"),
c(NA, NA, "P0"))
options = cbind( c("P0", "P1", "P2"),
c("P0", "P1", NA),
c("P0", NA, NA),
c("P2", NA, NA),
c("P1", "P2", NA),
c("P1", NA, NA),
c(NA, "P0", NA),
c(NA, "P0", "P1"),
c(NA, NA, "P0"))
options
options[,sample(10, 100, replace = TRUE)]
sample(10, 100, replace = TRUE)
options
options = cbind( c("P0", "P1", "P2"),
c("P0", "P1", NA),
c("P0", NA, NA),
c("P2", NA, NA),
c("P1", "P2", NA),
c("P1", NA, NA),
c(NA, "P0", NA),
c(NA, "P0", "P1"),
c(NA, NA, "P0"),
c(NA, NA, NA))
options[,sample(10, 100, replace = TRUE)]
cbind(get.id(population, gen =1), sample(c("M", "F"), 100, replace = TRUE), options[,sample(10, 100, replace = TRUE)])
meta_data = cbind(get.id(population, gen =1), sample(c("M", "F"), 100, replace = TRUE), t(options[,sample(10, 100, replace = TRUE)]))
meta_data
colnames(meta_data) = c("ID", "sex", "-2", "-1", "0")
row.names(meta_data) = NULL
write.table(meta_data, file = "example_meta.txt")
population = creating.diploid(vcf = "example.vcf")
get.vcf(population, path = "example", gen = 1, use.id = TRUE)
population = creating.diploid(vcf = "example.vcf")
population = creating.diploid(vcf = "example.vcf", sex.quota = 0)
read.table("example_meta.txt")
meta_data = cbind(get.id(population, gen =1), sample(c("M", "F"), 100, replace = TRUE), t(options[,sample(10, 100, replace = TRUE)]))
colnames(meta_data) = c("ID", "sex", "-2", "-1", "0")
row.names(meta_data) = NULL
meta_data
write.table(meta_data, file = "example_meta.txt")
read.table("example_meta.txt")
as.matrix(read.table("example_meta.txt"))
write.table(meta_data, file = "example_meta.txt", quote = FALSE, row.names = FALSE)
as.matrix(read.table("example_meta.txt"))
as.matrix(read.table("example_meta.txt", header = TRUE))
colnames(meta_data) = c("ID", "sex", "2021", "2022", "2023")
row.names(meta_data) = NULL
write.table(meta_data, file = "example_meta.txt", quote = FALSE, row.names = FALSE)
as.matrix(read.table("example_meta.txt", header = TRUE))
meta_import = as.matrix(read.table("example_meta.txt", header = TRUE))
unique(meta_import[,1:3])
unique(as.character(meta_import[,1:3]))
unique(as.character(meta_import[,-(1:2)]))
unique(c(NA, as.character(meta_import[,-(1:2)])))[-1]
types = unique(c(NA, as.character(meta_import[,-(1:2)])))[-1]
years = ncol(meta_import) - 2
years = colnames(meta_import)[-(1:2)]
years
