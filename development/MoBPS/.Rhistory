} else if(length(prev_rest_take)==0){
if(miraculix){
Z.code2 <- Z.code
} else{
Zt2 <- Zt
}
}
if(relationship.matrix!="vanRaden"){
if(length(bve.p_i.list)==0){
if(miraculix){
if (requireNamespace("miraculix", quietly = TRUE)) {
#p_i <- miraculix::allele_freq(Z.code2)
p_i <- rowMeans(as.matrix(Z.code2))/2
}
} else{
p_i <- rowSums(Zt[,take2[rest_take]])/2
}
} else{
p_i <- bve.p_i.list
}
}
if(miraculix){
if (requireNamespace("miraculix", quietly = TRUE)) {
if(fast.uhat){
u_hat <- cbind(u_hat, 1/ 2 / sum(p_i*(1-p_i))* ((as.matrix(Z.code2) -  2* p_i) %*%  Rest_term), deparse.level = 0)
} else{
u_hat <- cbind(u_hat, 1/ 2 / sum(p_i*(1-p_i)) * ((as.matrix(Z.code2) -  2* p_i) %*%  A1 %*% (y_hat[take2[rest_take],bven] - beta_hat[bven])), deparse.level = 0)
}
}
} else {
if(fast.uhat){
u_hat <- cbind(u_hat, 1/ 2 / sum(p_i*(1-p_i))*(Ztm[,take2[rest_take]] %*% Rest_term), deparse.level = 0)
} else{
u_hat <- cbind(u_hat, 1/ 2 / sum(p_i*(1-p_i))*(Ztm[,take2[rest_take]] %*% (A1 %*% (y_hat[take2[rest_take],bven] - beta_hat[bven]))), deparse.level = 0)
}
}
if(store.comp.times.bve){
after <- as.numeric(Sys.time())
z_uhat <- z_uhat + after - before
}
if(rrblup.required){
if(miraculix){
if (requireNamespace("miraculix", quietly = TRUE)) {
y_hat[take3,bven] <- u_hat[,bven] %*% (as.matrix(Z.code)[,take3]-2*p_i) + beta_hat[bven]
}
} else {
y_hat[take3,bven] <- u_hat[,bven] %*% Ztm[,take3] + beta_hat[bven]
}
}
}
} else{
y_hat[,bven] <- y[,bven]
}
} else{
which_skip <- which(skip_trait==bven)
y_hat[,bven] <- y_hat[, replace_trait[which_skip]]
}
if(store.comp.times.bve){
comp.times.bve[4] <- as.numeric(Sys.time())
}
if(estimate.reliability){
suppressWarnings(temp1 <- stats::cor(y_hat[bve.insert,bven], y_real[bve.insert, bven])^2)
if(is.na(temp1)){
if(stats::var(y_hat[bve.insert,bven])==0){
warning("Reliability estimation = 0 because all individuals have the same breeding value")
}
if(stats::var(y_real[bve.insert,bven])==0){
warning("Reliability estimation = 0 because all individuals have the same genomic value")
}
temp1 <- 0
}
y_reli[,bven] <- temp1
}
if(n.rep>0){
for(index in (1:nrow(loop_elements_copy))[bve.insert.copy]){
if(length(stay.loop.elements)>0){
non_copy <- which(stay.loop.elements==loop_elements_copy[index,6])
} else{
non_copy <- loop_elements_copy[index,6]
}
if(length(non_copy)==1){
population$breeding[[loop_elements_copy[index,4]]][[loop_elements_copy[index,5]+2]][bve.keeps, loop_elements_copy[index,2]] <- y_hat[non_copy,bve.keeps]
}
}
}
#  GWAS CODE NOT WRITEN FOR PARALLEL COMPUTING
if(gwas.u){
if(y.gwas.used=="pheno"){
y_gwas <- y
} else if(y.gwas.used=="bv"){
y_gwas <- y_real
} else if(y.gwas.used=="bve"){
y_gwas <- y_hat
}
if(nrow(gwas.database)!=nrow(bve.database) || prod(gwas.database==bve.database)==0){
loop_elements_gwas_list <- derive.loop.elements(population=population, bve.database=bve.database,
bve.class=bve.class, bve.avoid.duplicates=bve.avoid.duplicates,
store.adding=TRUE)
loop_elements_gwas <- loop_elements_gwas_list[[1]]
n.animals.gwas <- nrow(loop_elements_gwas)
}
if(gwas.group.standard){
gwas_start <- loop_elements_gwas_list[[2]]
}
if(nrow(gwas.database)!=nrow(bve.database) || prod(gwas.database==bve.database)==0){
Zt <- array(0L,dim=c(sum(population$info$snp), n.animals.gwas))
y_gwas <- array(0, dim=c(n.animals.gwas, population$info$bv.nr))
cindex <- 1
for(index in 1:n.animals.gwas){
k.database <- gwas.database[loop_elements_gwas[index,3],]
if(miraculix){
if (requireNamespace("miraculix", quietly = TRUE)) {
Zt[,cindex] <- miraculix::computeSNPS(population, k.database[1],k.database[2],kindex, what="geno", output_compressed=FALSE)
}
} else{
Zt[,cindex] <- base::as.integer(colSums(compute.snps(population, k.database[1],k.database[2],kindex, import.position.calculation=import.position.calculation, decodeOriginsU=decodeOriginsU, bit.storing=bit.storing, nbits=nbits, output_compressed=FALSE)))
}
for(bven in 1:population$info$bv.nr){
# HIER EVENTUELL SNPs auslesen!
if(y.gwas.used=="pheno"){
y_gwas[cindex,bven] <- population$breeding[[k.database[1]]][[8+k.database[2]]][bven,kindex]
} else if(y.gwas.used=="bv"){
y_gwas[cindex,bven] <- population$breeding[[k.database[1]]][[6+k.database[2]]][bven,kindex]
} else if(y.gwas.used=="bve"){
y_gwas[cindex,bven] <- population$breeding[[k.database[1]]][[2+k.database[2]]][bven,kindex]
}
}
cindex <- cindex +1
}
}
if(gwas.group.standard){
for(indexg in 1:(length(gwas_start)-1)){
if(gwas_start[indexg]>=(gwas_start[indexg+1]-1)){
y_gwas[gwas_start[indexg]:(gwas_start[indexg+1]-1), bven] <- y_gwas[gwas_start[indexg]:(gwas_start[indexg+1]-1), bven] - mean(y_gwas[gwas_start[indexg]:(gwas_start[indexg+1]-1), bven])
}
}
}
x_mean <- rowMeans(Zt)
x2_mean <- rowMeans(Zt^2)
#          xy_mean <- colMeans(Z*y_gwas[,bven])
xy_mean <- colMeans(t(Zt)*y_gwas[,bven])
n <- length(y_gwas[,bven])
y_mean <- mean(y_gwas[,bven])
b1 <- (n *xy_mean - n *x_mean * y_mean) / (x2_mean*n - n *x_mean^2)
if(approx.residuals==FALSE){
sigma1 <- 1/(n * (x2_mean-(x_mean)^2))
b0 <- y_mean - b1 * x_mean
var1 <- numeric(length(sigma1))
for(index in 1:length(sigma1)){
var1[index] <- sigma1[index] * stats::var(y_gwas[,bven] - b1[index] * Zt[index,] - b0[index]) * (n-1)/(n-2)
}
} else{
var1 <- 1/(n * (x2_mean-(x_mean)^2)) * stats::var(y_gwas[,bven])
}
test <- b1/sqrt(var1)
gwas_hat <- cbind(gwas_hat, test, deparse.level = 0)
#sorted <- sort(abs(test), index.return=TRUE)
}
}
for(index in (1:nrow(loop_elements))[bve.insert]){
population$breeding[[loop_elements[index,4]]][[loop_elements[index,5]+2]][bve.keeps, loop_elements[index,2]] <- y_hat[index,bve.keeps]
}
if(calculate.reliability || estimate.reliability || mixblup.reliability){
for(index in (1:nrow(loop_elements))[bve.insert]){
population$breeding[[loop_elements[index,4]]][[loop_elements[index,5]+18]][bve.keeps, loop_elements[index,2]] <- y_reli[index,bve.keeps]
}
}
if(report.accuracy){
if(verbose) cat("Correlation between genetic values and BVE:\n")
if(n.rep==0){
y_hat_temp <- y_hat
y_hat_temp[y_hat_temp==0] <- NA
if(length(bve.ignore.traits)>0){
acc <- suppressWarnings(stats::cor(y_real2[bve.insert,-bve.ignore.traits], y_hat_temp[bve.insert,-bve.ignore.traits], use="pairwise.complete.obs"))
} else{
acc <- suppressWarnings(stats::cor(y_real2[bve.insert,], y_hat_temp[bve.insert,], use="pairwise.complete.obs"))
}
} else{
insert.temp <- numeric(length(bve.insert.copy))
if(length(stay.loop.elements)>0){
for(index in (1:nrow(loop_elements_copy))[bve.insert.copy]){
inserter <- which(stay.loop.elements==loop_elements_copy[index,6])
insert.temp[index] <- if(length(inserter)==1){ inserter} else{NA}
}
} else{
for(index in (1:nrow(loop_elements_copy))[bve.insert.copy]){
insert.temp[index] <- loop_elements_copy[index,6]
}
}
y_hat_temp <- rbind(y_hat[bve.insert,,drop=FALSE], y_hat[insert.temp,,drop=FALSE])
y_hat_temp[y_hat_temp==0] <- NA
if(length(bve.ignore.traits)>0){
acc <- suppressWarnings(stats::cor(rbind(y_real2[bve.insert,-bve.ignore.traits,drop=FALSE], y_real2[insert.temp,-bve.ignore.traits, drop=FALSE]),
y_hat_temp[,-bve.ignore.traits,drop=FALSE], use="pairwise.complete.obs"))
} else{
acc <- suppressWarnings(stats::cor(rbind(y_real2[bve.insert,,drop=FALSE], y_real2[insert.temp,, drop=FALSE]),
y_hat_temp[,,drop=FALSE], use="pairwise.complete.obs"))
}
}
if(length(acc)==1){
acc <- matrix(acc,nrow=1)
}
if(sum(is.na(acc))>0){
acc[is.na(acc)] <- 0
}
if(verbose) cat(diag(acc))
if(verbose) cat("\n")
}
}
if(u_hat_possible && bve && estimate.u && relationship.matrix=="vanRaden"){
if(length(to_remove)==0){
rownames(u_hat) = population$info$snp.name
} else{
rownames(u_hat) = population$info$snp.name[-to_remove]
}
population$info$u_hat[[length(population$info$u_hat)+1]] <- u_hat
population$info$u_hat_single[[length(population$info$u_hat)]] <- list()
for(bven in 1:ncol(u_hat)){
population$info$u_hat_single[[length(population$info$u_hat)]][[bven]] <- cbind((-2*p_i) *u_hat[,bven],(-2*p_i+1) *u_hat[,bven],(-2*p_i+2) *u_hat[,bven], deparse.level = 0)
}
} else if(u_hat_possible && bve && estimate.u && relationship.matrix=="CM"){
population$info$u_hat[[length(population$info$u_hat)+1]] <- u_hat
population$info$u_hat_single[[length(population$info$u_hat)]] <- list()
for(bven in 1:ncol(u_hat)){
population$info$u_hat_single[[length(population$info$u_hat)]][[bven]] <- cbind(u_hat[1:nrow(Zt),bven],u_hat[1:nrow(Zt)+ nrow(Zt),bven],u_hat[1:nrow(Zt)+2*nrow(Zt),bven], deparse.level = 0)
}
}
if(gwas.u){
if(sum(is.na(gwas_hat)>0)){
gwas_hat[is.na(gwas_hat)] <- 0
}
population$info$gwas_hat[[length(population$info$gwas_hat)+1]] <- gwas_hat
}
if(store.comp.times.bve){
comp.times.bve[5] <- as.numeric(Sys.time())
}
if(store.comp.times){
comp.times[5] <- as.numeric(Sys.time())
}
}
n_row
max(get.npheno(population, database = bve.database))
length(loop_elements_list[[2]])
pheno_table = matrix(0, nrow = n_row, ncol = ncol(y))
individual_y = get.pheno.single(population, database = bve.database)
individual_id = get.id(population, database = bve.database)
kindex = 1
loop_elements_list[[2]]
index
tmp1 = t(individual_y[[index]])[,bve.keeps,drop = FALSE]
tmp1
tmp1 = t(individual_y[[index]])[,bve.keeps,drop = FALSE]
bve.keeps
pheno_table[kindex:(kindex + nrow(tmp1) - 1),] = cbind(individual_id[index], 1, tmp1)
pheno_table[kindex:(kindex + nrow(tmp1) - 1),]
pheno_table = matrix(0, nrow = n_row, ncol = ncol(y) + 2)
individual_y = get.pheno.single(population, database = bve.database)
individual_id = get.id(population, database = bve.database)
kindex = 1
for(index in loop_elements_list[[2]]){
tmp1 = t(individual_y[[index]])[,bve.keeps,drop = FALSE]
pheno_table[kindex:(kindex + nrow(tmp1) - 1),] = cbind(individual_id[index], 1, tmp1)
kindex = kindex + nrow(tmp1)
}
pheno_table
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.path = "MiXBLUP/MiXBLUP.exe")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe", mixblup.multiple.records = TRUE)
pheno_table
kindex
nrow
if(kindex <= n_row){
pheno_table = pheno_table[1:(kindex - 1),]
}
pheno_table
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe", mixblup.multiple.records = TRUE)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.path = "MiXBLUP/MiXBLUP.exe")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe", mixblup.multiple.records = TRUE)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::build()
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
mir_data = as.matrix(read.table("mir_spectra_3_clean.csv", sep = ";"))
dim(mir_data)
table(mir_data[,1])
mir_data[1:5,]
mir_data[1:5,1:10]
tt = paste0(mir_data[,1], mir_data[,4])
data = mir_data[,-(1:6)]
storage.mode(data) = "numeric"
month = substr(mir_data[,4], start = 5, stop =6)
day = substr(mir_data[,4], start = 7, stop =8)
day
month
data_scale = scale(data)
index = 1
data_m = data[month==index,]
data_m
dim(data_m)
month
index
month = as.numeric(substr(mir_data[,4], start = 5, stop =6))
day = as.numeric(substr(mir_data[,4], start = 7, stop =8))
data_m = data[month==index,]
plot(0,0)
dim(data_m)
plot(colMeans(data_m))
for(index in 1:12){
data_m = data[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l")
} else{
lines(colMeans(data_m))
}
}
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l")
} else{
lines(colMeans(data_m))
}
}
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-0.4,0.4))
} else{
lines(colMeans(data_m))
}
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-0.4,0.4))
} else{
lines(colMeans(data_m))
}
}
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-5,5))
} else{
lines(colMeans(data_m))
}
}
par(mfrow = c(3,4))
for(index in 1:12){
data_m = data_scale[month==index,]
plot(colMeans(data_m), type = "l", ylim = c(-5,5))
}
index = 10
month==index
data_m = data_scale[month==index,]
dim(data_m)
colMeans(data_m)
data_m[,1]
hist(data_m[,1])
plot(data_m[,1])
hist(data[,1])
which(data[,1]< 0.5)
plot(data[20262,])
data[20262,]
mir_data[,7]
as.numeric(mir_data[,7])!= 0
mir_data = mir_data[as.numeric(mir_data[,7])!= 0,]
dim(mir_data)
table(mir_data[,1])
tt = paste0(mir_data[,1], mir_data[,4])
data = mir_data[,-(1:6)]
storage.mode(data) = "numeric"
month = as.numeric(substr(mir_data[,4], start = 5, stop =6))
day = as.numeric(substr(mir_data[,4], start = 7, stop =8))
data_scale = scale(data)
for(index in 1:12){
data_m = data[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l")
} else{
lines(colMeans(data_m))
}
}
par(mfrow = c(3,4))
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-5,5))
} else{
lines(colMeans(data_m))
}
}
par(mfrow = c(1,1))
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-5,5))
} else{
lines(colMeans(data_m))
}
}
col = sort(rep(1:4,3))
par(mfrow = c(1,1))
col = sort(rep(1:4,3))
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-5,5), col = col[index])
} else{
lines(colMeans(data_m), col = col[index])
}
}
par(mfrow = c(1,1))
col = sort(rep(1:4,3))
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-1,1), col = col[index])
} else{
lines(colMeans(data_m), col = col[index])
}
}
library(RColorBrewer)
display.brewer.all()
display.brewer.pal(n = 12, name = 'RdBu')
display.brewer.pal(n = 12, name = 'Accent')
display.brewer.pal(n = 12, name = 'Set3')
brewer.pal(n = 12, name = 'Set3')
col = brewer.pal(n = 12, name = 'Set3')
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-1,1), col = col[index])
} else{
lines(colMeans(data_m), col = col[index])
}
}
col = brewer.pal(n = 12, name = 'Set3')
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-1,1), col = col[index], lwd = 2)
} else{
lines(colMeans(data_m), col = col[index], lwd = 2)
}
}
legend("topleft", 1:12, col = col, lty = 1)
legend("topleft", as.character(1:12), col = col, lty = 1)
legend("topleft", as.character(1:12), col = col, lty = 1, lwd =2 )
legend("topleft", as.character(1:12), col = col, lty = 1, lwd =5 )
col = brewer.pal(n = 12, name = 'Set3')
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-1,1), xlim=c(-100,1065), col = col[index], lwd = 2)
} else{
lines(colMeans(data_m), col = col[index], lwd = 2)
}
}
legend("topleft", as.character(1:12), col = col, lty = 1, lwd =5 )
col = brewer.pal(n = 12, name = 'Set3')
for(index in 1:12){
data_m = data_scale[month==index,]
if(index ==1){
plot(colMeans(data_m), type = "l", ylim = c(-1,1), ylab="standardized average", xlab = "wave length", xlim=c(-100,1065), col = col[index], lwd = 2)
} else{
lines(colMeans(data_m), col = col[index], lwd = 2)
}
}
legend("topleft", as.character(1:12), col = col, lty = 1, lwd =5 )
population = creating.diploid(nsnp = 100, nindi = c(25,25), n.additive = c(100,200))
population = breeding.diploid(population, heritability = 0.4, n.observation = c(2,5), phenotyping.database = cbind(1,1))
get.pheno(population, gen = 1)
get.npheno(population, gen = 1)
get.pheno.single(population, gen = 1)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1)
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe", mixblup.multiple.records = TRUE)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe", mixblup.multiple.records = TRUE)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1)
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe", mixblup.multiple.records = TRUE)
devtools::build()
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::build()
population = creating.diploid(nsnp = 100, nindi = c(25,25), n.additive = c(100,200,300))
population = breeding.diploid(population, heritability = 0.4, n.observation = c(2,5,1), phenotyping.database = cbind(1,1))
get.pheno(population, gen = 1)
get.npheno(population, gen = 1)
get.pheno.single(population, gen = 1)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, bve.ignore.traits = 2)
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, bve.ignore.traits = 2, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, bve.ignore.traits = 2, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe", mixblup.multiple.records = TRUE)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, bve.ignore.traits = 2, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe", mixblup.multiple.records = TRUE)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, bve.ignore.traits = 2, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe", mixblup.multiple.records = TRUE)
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, bve.ignore.traits = 2, mixblup.bve = TRUE,  mixblup.path = "MiXBLUP/MiXBLUP.exe")
population = breeding.diploid(population, bve = TRUE, bve.gen = 1, bve.ignore.traits = 2)
devtools::build()
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::build()
